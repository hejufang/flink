/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbDeserializeTest.proto

package org.apache.flink.formats.pb;

public final class PbDeserializeTest {
  private PbDeserializeTest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code org.apache.flink.formats.pb.EnumCase}
   */
  public enum EnumCase
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ONE = 0;</code>
     */
    ONE(0),
    /**
     * <code>TWO = 1;</code>
     */
    TWO(1),
    /**
     * <code>THREE = 2;</code>
     */
    THREE(2),
    /**
     * <code>FOUR = 3;</code>
     */
    FOUR(3),
    /**
     * <code>FIVE = 4;</code>
     */
    FIVE(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ONE = 0;</code>
     */
    public static final int ONE_VALUE = 0;
    /**
     * <code>TWO = 1;</code>
     */
    public static final int TWO_VALUE = 1;
    /**
     * <code>THREE = 2;</code>
     */
    public static final int THREE_VALUE = 2;
    /**
     * <code>FOUR = 3;</code>
     */
    public static final int FOUR_VALUE = 3;
    /**
     * <code>FIVE = 4;</code>
     */
    public static final int FIVE_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnumCase valueOf(int value) {
      return forNumber(value);
    }

    public static EnumCase forNumber(int value) {
      switch (value) {
        case 0: return ONE;
        case 1: return TWO;
        case 2: return THREE;
        case 3: return FOUR;
        case 4: return FIVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnumCase>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnumCase> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnumCase>() {
            public EnumCase findValueByNumber(int number) {
              return EnumCase.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.flink.formats.pb.PbDeserializeTest.getDescriptor().getEnumTypes().get(0);
    }

    private static final EnumCase[] VALUES = values();

    public static EnumCase valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnumCase(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.apache.flink.formats.pb.EnumCase)
  }

  public interface MessageCaseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.formats.pb.MessageCase)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string stringTestInMessage = 1;</code>
     */
    java.lang.String getStringTestInMessage();
    /**
     * <code>string stringTestInMessage = 1;</code>
     */
    com.google.protobuf.ByteString
        getStringTestInMessageBytes();

    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */
    int getMapTestInMessageCount();
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */
    boolean containsMapTestInMessage(
        java.lang.String key);
    /**
     * Use {@link #getMapTestInMessageMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getMapTestInMessage();
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getMapTestInMessageMap();
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    int getMapTestInMessageOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    int getMapTestInMessageOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code org.apache.flink.formats.pb.MessageCase}
   */
  public  static final class MessageCase extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.formats.pb.MessageCase)
      MessageCaseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MessageCase.newBuilder() to construct.
    private MessageCase(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MessageCase() {
      stringTestInMessage_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MessageCase(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              stringTestInMessage_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                mapTestInMessage_ = com.google.protobuf.MapField.newMapField(
                    MapTestInMessageDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              mapTestInMessage__ = input.readMessage(
                  MapTestInMessageDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              mapTestInMessage_.getMutableMap().put(
                  mapTestInMessage__.getKey(), mapTestInMessage__.getValue());
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMapTestInMessage();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.class, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder.class);
    }

    private int bitField0_;
    public static final int STRINGTESTINMESSAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object stringTestInMessage_;
    /**
     * <code>string stringTestInMessage = 1;</code>
     */
    public java.lang.String getStringTestInMessage() {
      java.lang.Object ref = stringTestInMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stringTestInMessage_ = s;
        return s;
      }
    }
    /**
     * <code>string stringTestInMessage = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStringTestInMessageBytes() {
      java.lang.Object ref = stringTestInMessage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stringTestInMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MAPTESTINMESSAGE_FIELD_NUMBER = 2;
    private static final class MapTestInMessageDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> mapTestInMessage_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetMapTestInMessage() {
      if (mapTestInMessage_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MapTestInMessageDefaultEntryHolder.defaultEntry);
      }
      return mapTestInMessage_;
    }

    public int getMapTestInMessageCount() {
      return internalGetMapTestInMessage().getMap().size();
    }
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    public boolean containsMapTestInMessage(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMapTestInMessage().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMapTestInMessageMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getMapTestInMessage() {
      return getMapTestInMessageMap();
    }
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getMapTestInMessageMap() {
      return internalGetMapTestInMessage().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    public int getMapTestInMessageOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetMapTestInMessage().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
     */

    public int getMapTestInMessageOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetMapTestInMessage().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getStringTestInMessageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stringTestInMessage_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMapTestInMessage(),
          MapTestInMessageDefaultEntryHolder.defaultEntry,
          2);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getStringTestInMessageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stringTestInMessage_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetMapTestInMessage().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        mapTestInMessage__ = MapTestInMessageDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, mapTestInMessage__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.formats.pb.PbDeserializeTest.MessageCase)) {
        return super.equals(obj);
      }
      org.apache.flink.formats.pb.PbDeserializeTest.MessageCase other = (org.apache.flink.formats.pb.PbDeserializeTest.MessageCase) obj;

      boolean result = true;
      result = result && getStringTestInMessage()
          .equals(other.getStringTestInMessage());
      result = result && internalGetMapTestInMessage().equals(
          other.internalGetMapTestInMessage());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STRINGTESTINMESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getStringTestInMessage().hashCode();
      if (!internalGetMapTestInMessage().getMap().isEmpty()) {
        hash = (37 * hash) + MAPTESTINMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMapTestInMessage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.formats.pb.PbDeserializeTest.MessageCase prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.formats.pb.MessageCase}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.formats.pb.MessageCase)
        org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMapTestInMessage();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableMapTestInMessage();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.class, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder.class);
      }

      // Construct using org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stringTestInMessage_ = "";

        internalGetMutableMapTestInMessage().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_MessageCase_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getDefaultInstanceForType() {
        return org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase build() {
        org.apache.flink.formats.pb.PbDeserializeTest.MessageCase result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase buildPartial() {
        org.apache.flink.formats.pb.PbDeserializeTest.MessageCase result = new org.apache.flink.formats.pb.PbDeserializeTest.MessageCase(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.stringTestInMessage_ = stringTestInMessage_;
        result.mapTestInMessage_ = internalGetMapTestInMessage();
        result.mapTestInMessage_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.formats.pb.PbDeserializeTest.MessageCase) {
          return mergeFrom((org.apache.flink.formats.pb.PbDeserializeTest.MessageCase)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.formats.pb.PbDeserializeTest.MessageCase other) {
        if (other == org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.getDefaultInstance()) return this;
        if (!other.getStringTestInMessage().isEmpty()) {
          stringTestInMessage_ = other.stringTestInMessage_;
          onChanged();
        }
        internalGetMutableMapTestInMessage().mergeFrom(
            other.internalGetMapTestInMessage());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.formats.pb.PbDeserializeTest.MessageCase parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.formats.pb.PbDeserializeTest.MessageCase) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object stringTestInMessage_ = "";
      /**
       * <code>string stringTestInMessage = 1;</code>
       */
      public java.lang.String getStringTestInMessage() {
        java.lang.Object ref = stringTestInMessage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stringTestInMessage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stringTestInMessage = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStringTestInMessageBytes() {
        java.lang.Object ref = stringTestInMessage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringTestInMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stringTestInMessage = 1;</code>
       */
      public Builder setStringTestInMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stringTestInMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stringTestInMessage = 1;</code>
       */
      public Builder clearStringTestInMessage() {
        
        stringTestInMessage_ = getDefaultInstance().getStringTestInMessage();
        onChanged();
        return this;
      }
      /**
       * <code>string stringTestInMessage = 1;</code>
       */
      public Builder setStringTestInMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stringTestInMessage_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> mapTestInMessage_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMapTestInMessage() {
        if (mapTestInMessage_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MapTestInMessageDefaultEntryHolder.defaultEntry);
        }
        return mapTestInMessage_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableMapTestInMessage() {
        onChanged();;
        if (mapTestInMessage_ == null) {
          mapTestInMessage_ = com.google.protobuf.MapField.newMapField(
              MapTestInMessageDefaultEntryHolder.defaultEntry);
        }
        if (!mapTestInMessage_.isMutable()) {
          mapTestInMessage_ = mapTestInMessage_.copy();
        }
        return mapTestInMessage_;
      }

      public int getMapTestInMessageCount() {
        return internalGetMapTestInMessage().getMap().size();
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public boolean containsMapTestInMessage(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMapTestInMessage().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMapTestInMessageMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getMapTestInMessage() {
        return getMapTestInMessageMap();
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getMapTestInMessageMap() {
        return internalGetMapTestInMessage().getMap();
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public int getMapTestInMessageOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetMapTestInMessage().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public int getMapTestInMessageOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetMapTestInMessage().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMapTestInMessage() {
        internalGetMutableMapTestInMessage().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public Builder removeMapTestInMessage(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMapTestInMessage().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableMapTestInMessage() {
        return internalGetMutableMapTestInMessage().getMutableMap();
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */
      public Builder putMapTestInMessage(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutableMapTestInMessage().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; MapTestInMessage = 2;</code>
       */

      public Builder putAllMapTestInMessage(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableMapTestInMessage().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.formats.pb.MessageCase)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.formats.pb.MessageCase)
    private static final org.apache.flink.formats.pb.PbDeserializeTest.MessageCase DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.formats.pb.PbDeserializeTest.MessageCase();
    }

    public static org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MessageCase>
        PARSER = new com.google.protobuf.AbstractParser<MessageCase>() {
      @java.lang.Override
      public MessageCase parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MessageCase(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MessageCase> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MessageCase> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TestPbDeserailizeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.flink.formats.pb.TestPbDeserailize)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 intTest = 1;</code>
     */
    int getIntTest();

    /**
     * <code>int64 longTest = 2;</code>
     */
    long getLongTest();

    /**
     * <code>string stringTest = 3;</code>
     */
    java.lang.String getStringTest();
    /**
     * <code>string stringTest = 3;</code>
     */
    com.google.protobuf.ByteString
        getStringTestBytes();

    /**
     * <code>bool boolTest = 4;</code>
     */
    boolean getBoolTest();

    /**
     * <code>double doubleTest = 5;</code>
     */
    double getDoubleTest();

    /**
     * <code>float floatTest = 6;</code>
     */
    float getFloatTest();

    /**
     * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
     */
    int getEnumTestValue();
    /**
     * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
     */
    org.apache.flink.formats.pb.PbDeserializeTest.EnumCase getEnumTest();

    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> 
        getArrayTestList();
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getArrayTest(int index);
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    int getArrayTestCount();
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    java.util.List<? extends org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder> 
        getArrayTestOrBuilderList();
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder getArrayTestOrBuilder(
        int index);

    /**
     * <code>bytes bytesTest = 9;</code>
     */
    com.google.protobuf.ByteString getBytesTest();
  }
  /**
   * Protobuf type {@code org.apache.flink.formats.pb.TestPbDeserailize}
   */
  public  static final class TestPbDeserailize extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.flink.formats.pb.TestPbDeserailize)
      TestPbDeserailizeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TestPbDeserailize.newBuilder() to construct.
    private TestPbDeserailize(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TestPbDeserailize() {
      intTest_ = 0;
      longTest_ = 0L;
      stringTest_ = "";
      boolTest_ = false;
      doubleTest_ = 0D;
      floatTest_ = 0F;
      enumTest_ = 0;
      arrayTest_ = java.util.Collections.emptyList();
      bytesTest_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TestPbDeserailize(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              intTest_ = input.readInt32();
              break;
            }
            case 16: {

              longTest_ = input.readInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              stringTest_ = s;
              break;
            }
            case 32: {

              boolTest_ = input.readBool();
              break;
            }
            case 41: {

              doubleTest_ = input.readDouble();
              break;
            }
            case 53: {

              floatTest_ = input.readFloat();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              enumTest_ = rawValue;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                arrayTest_ = new java.util.ArrayList<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase>();
                mutable_bitField0_ |= 0x00000080;
              }
              arrayTest_.add(
                  input.readMessage(org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.parser(), extensionRegistry));
              break;
            }
            case 74: {

              bytesTest_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          arrayTest_ = java.util.Collections.unmodifiableList(arrayTest_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_TestPbDeserailize_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.class, org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.Builder.class);
    }

    private int bitField0_;
    public static final int INTTEST_FIELD_NUMBER = 1;
    private int intTest_;
    /**
     * <code>int32 intTest = 1;</code>
     */
    public int getIntTest() {
      return intTest_;
    }

    public static final int LONGTEST_FIELD_NUMBER = 2;
    private long longTest_;
    /**
     * <code>int64 longTest = 2;</code>
     */
    public long getLongTest() {
      return longTest_;
    }

    public static final int STRINGTEST_FIELD_NUMBER = 3;
    private volatile java.lang.Object stringTest_;
    /**
     * <code>string stringTest = 3;</code>
     */
    public java.lang.String getStringTest() {
      java.lang.Object ref = stringTest_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stringTest_ = s;
        return s;
      }
    }
    /**
     * <code>string stringTest = 3;</code>
     */
    public com.google.protobuf.ByteString
        getStringTestBytes() {
      java.lang.Object ref = stringTest_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stringTest_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BOOLTEST_FIELD_NUMBER = 4;
    private boolean boolTest_;
    /**
     * <code>bool boolTest = 4;</code>
     */
    public boolean getBoolTest() {
      return boolTest_;
    }

    public static final int DOUBLETEST_FIELD_NUMBER = 5;
    private double doubleTest_;
    /**
     * <code>double doubleTest = 5;</code>
     */
    public double getDoubleTest() {
      return doubleTest_;
    }

    public static final int FLOATTEST_FIELD_NUMBER = 6;
    private float floatTest_;
    /**
     * <code>float floatTest = 6;</code>
     */
    public float getFloatTest() {
      return floatTest_;
    }

    public static final int ENUMTEST_FIELD_NUMBER = 7;
    private int enumTest_;
    /**
     * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
     */
    public int getEnumTestValue() {
      return enumTest_;
    }
    /**
     * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
     */
    public org.apache.flink.formats.pb.PbDeserializeTest.EnumCase getEnumTest() {
      @SuppressWarnings("deprecation")
      org.apache.flink.formats.pb.PbDeserializeTest.EnumCase result = org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.valueOf(enumTest_);
      return result == null ? org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.UNRECOGNIZED : result;
    }

    public static final int ARRAYTEST_FIELD_NUMBER = 8;
    private java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> arrayTest_;
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    public java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> getArrayTestList() {
      return arrayTest_;
    }
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    public java.util.List<? extends org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder> 
        getArrayTestOrBuilderList() {
      return arrayTest_;
    }
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    public int getArrayTestCount() {
      return arrayTest_.size();
    }
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getArrayTest(int index) {
      return arrayTest_.get(index);
    }
    /**
     * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
     */
    public org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder getArrayTestOrBuilder(
        int index) {
      return arrayTest_.get(index);
    }

    public static final int BYTESTEST_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString bytesTest_;
    /**
     * <code>bytes bytesTest = 9;</code>
     */
    public com.google.protobuf.ByteString getBytesTest() {
      return bytesTest_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (intTest_ != 0) {
        output.writeInt32(1, intTest_);
      }
      if (longTest_ != 0L) {
        output.writeInt64(2, longTest_);
      }
      if (!getStringTestBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, stringTest_);
      }
      if (boolTest_ != false) {
        output.writeBool(4, boolTest_);
      }
      if (doubleTest_ != 0D) {
        output.writeDouble(5, doubleTest_);
      }
      if (floatTest_ != 0F) {
        output.writeFloat(6, floatTest_);
      }
      if (enumTest_ != org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.ONE.getNumber()) {
        output.writeEnum(7, enumTest_);
      }
      for (int i = 0; i < arrayTest_.size(); i++) {
        output.writeMessage(8, arrayTest_.get(i));
      }
      if (!bytesTest_.isEmpty()) {
        output.writeBytes(9, bytesTest_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (intTest_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, intTest_);
      }
      if (longTest_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, longTest_);
      }
      if (!getStringTestBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, stringTest_);
      }
      if (boolTest_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, boolTest_);
      }
      if (doubleTest_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, doubleTest_);
      }
      if (floatTest_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, floatTest_);
      }
      if (enumTest_ != org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.ONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, enumTest_);
      }
      for (int i = 0; i < arrayTest_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, arrayTest_.get(i));
      }
      if (!bytesTest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, bytesTest_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize)) {
        return super.equals(obj);
      }
      org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize other = (org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize) obj;

      boolean result = true;
      result = result && (getIntTest()
          == other.getIntTest());
      result = result && (getLongTest()
          == other.getLongTest());
      result = result && getStringTest()
          .equals(other.getStringTest());
      result = result && (getBoolTest()
          == other.getBoolTest());
      result = result && (
          java.lang.Double.doubleToLongBits(getDoubleTest())
          == java.lang.Double.doubleToLongBits(
              other.getDoubleTest()));
      result = result && (
          java.lang.Float.floatToIntBits(getFloatTest())
          == java.lang.Float.floatToIntBits(
              other.getFloatTest()));
      result = result && enumTest_ == other.enumTest_;
      result = result && getArrayTestList()
          .equals(other.getArrayTestList());
      result = result && getBytesTest()
          .equals(other.getBytesTest());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INTTEST_FIELD_NUMBER;
      hash = (53 * hash) + getIntTest();
      hash = (37 * hash) + LONGTEST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLongTest());
      hash = (37 * hash) + STRINGTEST_FIELD_NUMBER;
      hash = (53 * hash) + getStringTest().hashCode();
      hash = (37 * hash) + BOOLTEST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBoolTest());
      hash = (37 * hash) + DOUBLETEST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDoubleTest()));
      hash = (37 * hash) + FLOATTEST_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getFloatTest());
      hash = (37 * hash) + ENUMTEST_FIELD_NUMBER;
      hash = (53 * hash) + enumTest_;
      if (getArrayTestCount() > 0) {
        hash = (37 * hash) + ARRAYTEST_FIELD_NUMBER;
        hash = (53 * hash) + getArrayTestList().hashCode();
      }
      hash = (37 * hash) + BYTESTEST_FIELD_NUMBER;
      hash = (53 * hash) + getBytesTest().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.flink.formats.pb.TestPbDeserailize}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.flink.formats.pb.TestPbDeserailize)
        org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailizeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_TestPbDeserailize_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.class, org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.Builder.class);
      }

      // Construct using org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArrayTestFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        intTest_ = 0;

        longTest_ = 0L;

        stringTest_ = "";

        boolTest_ = false;

        doubleTest_ = 0D;

        floatTest_ = 0F;

        enumTest_ = 0;

        if (arrayTestBuilder_ == null) {
          arrayTest_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          arrayTestBuilder_.clear();
        }
        bytesTest_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.flink.formats.pb.PbDeserializeTest.internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor;
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize getDefaultInstanceForType() {
        return org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize build() {
        org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize buildPartial() {
        org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize result = new org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.intTest_ = intTest_;
        result.longTest_ = longTest_;
        result.stringTest_ = stringTest_;
        result.boolTest_ = boolTest_;
        result.doubleTest_ = doubleTest_;
        result.floatTest_ = floatTest_;
        result.enumTest_ = enumTest_;
        if (arrayTestBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            arrayTest_ = java.util.Collections.unmodifiableList(arrayTest_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.arrayTest_ = arrayTest_;
        } else {
          result.arrayTest_ = arrayTestBuilder_.build();
        }
        result.bytesTest_ = bytesTest_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize) {
          return mergeFrom((org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize other) {
        if (other == org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize.getDefaultInstance()) return this;
        if (other.getIntTest() != 0) {
          setIntTest(other.getIntTest());
        }
        if (other.getLongTest() != 0L) {
          setLongTest(other.getLongTest());
        }
        if (!other.getStringTest().isEmpty()) {
          stringTest_ = other.stringTest_;
          onChanged();
        }
        if (other.getBoolTest() != false) {
          setBoolTest(other.getBoolTest());
        }
        if (other.getDoubleTest() != 0D) {
          setDoubleTest(other.getDoubleTest());
        }
        if (other.getFloatTest() != 0F) {
          setFloatTest(other.getFloatTest());
        }
        if (other.enumTest_ != 0) {
          setEnumTestValue(other.getEnumTestValue());
        }
        if (arrayTestBuilder_ == null) {
          if (!other.arrayTest_.isEmpty()) {
            if (arrayTest_.isEmpty()) {
              arrayTest_ = other.arrayTest_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureArrayTestIsMutable();
              arrayTest_.addAll(other.arrayTest_);
            }
            onChanged();
          }
        } else {
          if (!other.arrayTest_.isEmpty()) {
            if (arrayTestBuilder_.isEmpty()) {
              arrayTestBuilder_.dispose();
              arrayTestBuilder_ = null;
              arrayTest_ = other.arrayTest_;
              bitField0_ = (bitField0_ & ~0x00000080);
              arrayTestBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArrayTestFieldBuilder() : null;
            } else {
              arrayTestBuilder_.addAllMessages(other.arrayTest_);
            }
          }
        }
        if (other.getBytesTest() != com.google.protobuf.ByteString.EMPTY) {
          setBytesTest(other.getBytesTest());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int intTest_ ;
      /**
       * <code>int32 intTest = 1;</code>
       */
      public int getIntTest() {
        return intTest_;
      }
      /**
       * <code>int32 intTest = 1;</code>
       */
      public Builder setIntTest(int value) {
        
        intTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 intTest = 1;</code>
       */
      public Builder clearIntTest() {
        
        intTest_ = 0;
        onChanged();
        return this;
      }

      private long longTest_ ;
      /**
       * <code>int64 longTest = 2;</code>
       */
      public long getLongTest() {
        return longTest_;
      }
      /**
       * <code>int64 longTest = 2;</code>
       */
      public Builder setLongTest(long value) {
        
        longTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 longTest = 2;</code>
       */
      public Builder clearLongTest() {
        
        longTest_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object stringTest_ = "";
      /**
       * <code>string stringTest = 3;</code>
       */
      public java.lang.String getStringTest() {
        java.lang.Object ref = stringTest_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stringTest_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stringTest = 3;</code>
       */
      public com.google.protobuf.ByteString
          getStringTestBytes() {
        java.lang.Object ref = stringTest_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringTest_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stringTest = 3;</code>
       */
      public Builder setStringTest(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stringTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stringTest = 3;</code>
       */
      public Builder clearStringTest() {
        
        stringTest_ = getDefaultInstance().getStringTest();
        onChanged();
        return this;
      }
      /**
       * <code>string stringTest = 3;</code>
       */
      public Builder setStringTestBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stringTest_ = value;
        onChanged();
        return this;
      }

      private boolean boolTest_ ;
      /**
       * <code>bool boolTest = 4;</code>
       */
      public boolean getBoolTest() {
        return boolTest_;
      }
      /**
       * <code>bool boolTest = 4;</code>
       */
      public Builder setBoolTest(boolean value) {
        
        boolTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool boolTest = 4;</code>
       */
      public Builder clearBoolTest() {
        
        boolTest_ = false;
        onChanged();
        return this;
      }

      private double doubleTest_ ;
      /**
       * <code>double doubleTest = 5;</code>
       */
      public double getDoubleTest() {
        return doubleTest_;
      }
      /**
       * <code>double doubleTest = 5;</code>
       */
      public Builder setDoubleTest(double value) {
        
        doubleTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double doubleTest = 5;</code>
       */
      public Builder clearDoubleTest() {
        
        doubleTest_ = 0D;
        onChanged();
        return this;
      }

      private float floatTest_ ;
      /**
       * <code>float floatTest = 6;</code>
       */
      public float getFloatTest() {
        return floatTest_;
      }
      /**
       * <code>float floatTest = 6;</code>
       */
      public Builder setFloatTest(float value) {
        
        floatTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float floatTest = 6;</code>
       */
      public Builder clearFloatTest() {
        
        floatTest_ = 0F;
        onChanged();
        return this;
      }

      private int enumTest_ = 0;
      /**
       * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
       */
      public int getEnumTestValue() {
        return enumTest_;
      }
      /**
       * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
       */
      public Builder setEnumTestValue(int value) {
        enumTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.EnumCase getEnumTest() {
        @SuppressWarnings("deprecation")
        org.apache.flink.formats.pb.PbDeserializeTest.EnumCase result = org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.valueOf(enumTest_);
        return result == null ? org.apache.flink.formats.pb.PbDeserializeTest.EnumCase.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
       */
      public Builder setEnumTest(org.apache.flink.formats.pb.PbDeserializeTest.EnumCase value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        enumTest_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.flink.formats.pb.EnumCase enumTest = 7;</code>
       */
      public Builder clearEnumTest() {
        
        enumTest_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> arrayTest_ =
        java.util.Collections.emptyList();
      private void ensureArrayTestIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          arrayTest_ = new java.util.ArrayList<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase>(arrayTest_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.formats.pb.PbDeserializeTest.MessageCase, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder, org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder> arrayTestBuilder_;

      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> getArrayTestList() {
        if (arrayTestBuilder_ == null) {
          return java.util.Collections.unmodifiableList(arrayTest_);
        } else {
          return arrayTestBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public int getArrayTestCount() {
        if (arrayTestBuilder_ == null) {
          return arrayTest_.size();
        } else {
          return arrayTestBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase getArrayTest(int index) {
        if (arrayTestBuilder_ == null) {
          return arrayTest_.get(index);
        } else {
          return arrayTestBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder setArrayTest(
          int index, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase value) {
        if (arrayTestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArrayTestIsMutable();
          arrayTest_.set(index, value);
          onChanged();
        } else {
          arrayTestBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder setArrayTest(
          int index, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder builderForValue) {
        if (arrayTestBuilder_ == null) {
          ensureArrayTestIsMutable();
          arrayTest_.set(index, builderForValue.build());
          onChanged();
        } else {
          arrayTestBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder addArrayTest(org.apache.flink.formats.pb.PbDeserializeTest.MessageCase value) {
        if (arrayTestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArrayTestIsMutable();
          arrayTest_.add(value);
          onChanged();
        } else {
          arrayTestBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder addArrayTest(
          int index, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase value) {
        if (arrayTestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArrayTestIsMutable();
          arrayTest_.add(index, value);
          onChanged();
        } else {
          arrayTestBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder addArrayTest(
          org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder builderForValue) {
        if (arrayTestBuilder_ == null) {
          ensureArrayTestIsMutable();
          arrayTest_.add(builderForValue.build());
          onChanged();
        } else {
          arrayTestBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder addArrayTest(
          int index, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder builderForValue) {
        if (arrayTestBuilder_ == null) {
          ensureArrayTestIsMutable();
          arrayTest_.add(index, builderForValue.build());
          onChanged();
        } else {
          arrayTestBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder addAllArrayTest(
          java.lang.Iterable<? extends org.apache.flink.formats.pb.PbDeserializeTest.MessageCase> values) {
        if (arrayTestBuilder_ == null) {
          ensureArrayTestIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, arrayTest_);
          onChanged();
        } else {
          arrayTestBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder clearArrayTest() {
        if (arrayTestBuilder_ == null) {
          arrayTest_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          arrayTestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public Builder removeArrayTest(int index) {
        if (arrayTestBuilder_ == null) {
          ensureArrayTestIsMutable();
          arrayTest_.remove(index);
          onChanged();
        } else {
          arrayTestBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder getArrayTestBuilder(
          int index) {
        return getArrayTestFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder getArrayTestOrBuilder(
          int index) {
        if (arrayTestBuilder_ == null) {
          return arrayTest_.get(index);  } else {
          return arrayTestBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public java.util.List<? extends org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder> 
           getArrayTestOrBuilderList() {
        if (arrayTestBuilder_ != null) {
          return arrayTestBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(arrayTest_);
        }
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder addArrayTestBuilder() {
        return getArrayTestFieldBuilder().addBuilder(
            org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder addArrayTestBuilder(
          int index) {
        return getArrayTestFieldBuilder().addBuilder(
            index, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.getDefaultInstance());
      }
      /**
       * <code>repeated .org.apache.flink.formats.pb.MessageCase arrayTest = 8;</code>
       */
      public java.util.List<org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder> 
           getArrayTestBuilderList() {
        return getArrayTestFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.apache.flink.formats.pb.PbDeserializeTest.MessageCase, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder, org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder> 
          getArrayTestFieldBuilder() {
        if (arrayTestBuilder_ == null) {
          arrayTestBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.apache.flink.formats.pb.PbDeserializeTest.MessageCase, org.apache.flink.formats.pb.PbDeserializeTest.MessageCase.Builder, org.apache.flink.formats.pb.PbDeserializeTest.MessageCaseOrBuilder>(
                  arrayTest_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          arrayTest_ = null;
        }
        return arrayTestBuilder_;
      }

      private com.google.protobuf.ByteString bytesTest_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes bytesTest = 9;</code>
       */
      public com.google.protobuf.ByteString getBytesTest() {
        return bytesTest_;
      }
      /**
       * <code>bytes bytesTest = 9;</code>
       */
      public Builder setBytesTest(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        bytesTest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes bytesTest = 9;</code>
       */
      public Builder clearBytesTest() {
        
        bytesTest_ = getDefaultInstance().getBytesTest();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.flink.formats.pb.TestPbDeserailize)
    }

    // @@protoc_insertion_point(class_scope:org.apache.flink.formats.pb.TestPbDeserailize)
    private static final org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize();
    }

    public static org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TestPbDeserailize>
        PARSER = new com.google.protobuf.AbstractParser<TestPbDeserailize>() {
      @java.lang.Override
      public TestPbDeserailize parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestPbDeserailize(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TestPbDeserailize> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TestPbDeserailize> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.flink.formats.pb.PbDeserializeTest.TestPbDeserailize getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_formats_pb_MessageCase_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_formats_pb_MessageCase_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_flink_formats_pb_TestPbDeserailize_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027pbDeserializeTest.proto\022\033org.apache.fl" +
      "ink.formats.pb\"\275\001\n\013MessageCase\022\033\n\023string" +
      "TestInMessage\030\001 \001(\t\022X\n\020MapTestInMessage\030" +
      "\002 \003(\0132>.org.apache.flink.formats.pb.Mess" +
      "ageCase.MapTestInMessageEntry\0327\n\025MapTest" +
      "InMessageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001" +
      "(\005:\0028\001\"\214\002\n\021TestPbDeserailize\022\017\n\007intTest\030" +
      "\001 \001(\005\022\020\n\010longTest\030\002 \001(\003\022\022\n\nstringTest\030\003 " +
      "\001(\t\022\020\n\010boolTest\030\004 \001(\010\022\022\n\ndoubleTest\030\005 \001(" +
      "\001\022\021\n\tfloatTest\030\006 \001(\002\0227\n\010enumTest\030\007 \001(\0162%" +
      ".org.apache.flink.formats.pb.EnumCase\022;\n" +
      "\tarrayTest\030\010 \003(\0132(.org.apache.flink.form" +
      "ats.pb.MessageCase\022\021\n\tbytesTest\030\t \001(\014*;\n" +
      "\010EnumCase\022\007\n\003ONE\020\000\022\007\n\003TWO\020\001\022\t\n\005THREE\020\002\022\010" +
      "\n\004FOUR\020\003\022\010\n\004FIVE\020\004b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_org_apache_flink_formats_pb_MessageCase_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_flink_formats_pb_MessageCase_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_formats_pb_MessageCase_descriptor,
        new java.lang.String[] { "StringTestInMessage", "MapTestInMessage", });
    internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_descriptor =
      internal_static_org_apache_flink_formats_pb_MessageCase_descriptor.getNestedTypes().get(0);
    internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_formats_pb_MessageCase_MapTestInMessageEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_flink_formats_pb_TestPbDeserailize_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_flink_formats_pb_TestPbDeserailize_descriptor,
        new java.lang.String[] { "IntTest", "LongTest", "StringTest", "BoolTest", "DoubleTest", "FloatTest", "EnumTest", "ArrayTest", "BytesTest", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// If you modify this file, please use protoc to rebuild the java file.
// It cannot be built automatic because we do not find a proper maven plugin.
syntax = "proto2";

package com.bytedance.binlog;

option java_package = "com.bytedance.binlog";
option java_outer_classname = "DRCEntry";
option optimize_for = SPEED;

enum EventType {
    UNKNOWN = 1;
    // dml operation insert
    INSERT = 2;
    // dml operation update
    UPDATE = 3;
    // dml operation delete
    DELETE = 4;
    // ddl operation rename table
    RENAME = 5;
    // ddl operation alter table
    ALTER = 6;
    // ddl operation create index
    CINDEX = 7;
    // ddl operation drop index
    DINDEX = 8;
    // ddl operation create table
    CTABLE = 9;
    // ddl operation drop table
    DTABLE = 10;
    // begin/commit
    QUERY = 11;
    // ddl operation create database
    CDATABASE = 12;
    // ddl operation drop database
    DDATABASE = 13;
    // ddl operation truncate table
    TRUNCATE = 14;
}

// entry is formatted binlog event by dbus, which has four types
enum EntryType {
    // transaction begin
    BEGIN = 1;
    // transaction commit
    COMMIT = 2;
    // dml -- insert / update / delete
    DML = 3;
    // ddl -- such as alter / create
    DDL = 4;
}

// entry header information
message EntryHeader {
    optional int64 tpipe_message_offset = 1;
    optional uint64 drc_message_id = 2;
    // timestamp : binlog generate time 表示binlog在上游数据库侧生成的时间
    required int64 timestamp = 3;
    required uint64 source_cluster_id = 5;
    required uint32 server_id = 6;
    required uint32 dc_id = 7;
    // start_execute_time : binlog execute time 表示binlog实际执行的时间，正常情况下和timestamp基本上一样。但是如果是一个大事务的话，则和timestamp可能会差距比较多
    optional uint32 start_execute_time = 8;
    // binlog database name
    optional string database = 9;
    // binlog table name
    optional string table = 10;
    required EntryType entry_type = 11;
    repeated Index indexes = 12;
    repeated Pair props = 13; // 预留扩展
}

// index information
message Index {
    // index name
    required string name = 1;
    // column of index, 0 means first column of the table, and so on
    repeated int32 column_index = 2;
}

// formatted binlog event, colomn data/type/name is in body, other information is in header
message Entry {
    required EntryHeader header = 1;
    required EntryBody body = 2;
}

message EntryBody {
    repeated RowData rowdatas = 1;
    required EventType event_type = 2;
    // begin or commit or ddl
    optional string sql = 3;
    optional uint64 tableId = 4;
}

// row data information, before_image means row data before execute sql, after_image means row data after execute sql
message RowData {
    // before_image will exist in dml type : delete / update
    repeated Column before_image = 1;
    // after_image will exist in dml type : insert / update
    repeated Column after_image = 2;
}

// column information
message Column {
    // column index
    required int32 index = 1;
    // column name
    required string name = 2;
    // whether column is primary key
    optional bool is_pk = 3;
    // whether column is been updated
    optional bool updated = 4;
    // whether column is nullable, not actually value
    optional bool is_nullable = 5;
    // whether value is null
    required bool null = 6;
    optional string sql_type = 7;
    // column value
    optional bytes value = 8;
    // whether value is unsigned
    optional bool is_unsigned = 9;
    repeated Pair props = 13; // 预留扩展

}

/**预留扩展**/
message Pair{
    optional string key = 1;
    optional string value = 2;
}

enum MessageType {
    FULL = 1;
    FIRST = 2;
    MIDDLE = 3;
    LAST = 4;
}

message Message {
    // filled by importer
    optional int64 tpipe_message_offset = 1;
    // filled by dumper
    required uint64 drc_message_id = 2;
    required MessageType type = 3;
    required bytes payload = 4;
}

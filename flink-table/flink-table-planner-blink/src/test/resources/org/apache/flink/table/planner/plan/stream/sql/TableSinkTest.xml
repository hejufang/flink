<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAppendSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.appendSink], fields=[a, b])
+- LogicalProject(EXPR$0=[+($0, $1)], c=[$2])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(table=[default_catalog.default_database.appendSink], fields=[a, b], changelogMode=[NONE])
+- Calc(select=[+(a, b) AS EXPR$0, c], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAppendUpsertAndRetractSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.appendSink], fields=[a, b])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])

LogicalSink(table=[default_catalog.default_database.retractSink], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], b=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], b=[$1])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         :     +- LogicalProject(d=[$0], e=[$1])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
         +- LogicalProject(i=[$0], j=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, total_min])
+- LogicalAggregate(group=[{0}], total_min=[MIN($1)])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalUnion(all=[true])
      :     :- LogicalProject(a=[$0], b=[$1])
      :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      :     +- LogicalProject(d=[$0], e=[$1])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
      +- LogicalProject(i=[$0], j=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Union(all=[true], union=[a, b], changelogMode=[I], reuse_id=[1])
:- Calc(select=[a, b], changelogMode=[I])
:  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
+- Calc(select=[d, e], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[d, e, f], changelogMode=[I])

Sink(table=[default_catalog.default_database.appendSink], fields=[a, b], changelogMode=[NONE])
+- Reused(reference_id=[1])

Union(all=[true], union=[a, b], changelogMode=[I], reuse_id=[2])
:- Reused(reference_id=[1])
+- Calc(select=[i, j], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable3]], fields=[i, j, k], changelogMode=[I])

Sink(table=[default_catalog.default_database.retractSink], fields=[total_sum], changelogMode=[NONE])
+- GroupAggregate(select=[SUM(a) AS total_sum], changelogMode=[I,UB,UA])
   +- Exchange(distribution=[single], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- Reused(reference_id=[2])

Sink(table=[default_catalog.default_database.upsertSink], fields=[a, total_min], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, MIN(b) AS total_min], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractAndUpsertSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt])
+- LogicalAggregate(group=[{0}], frequency=[COUNT($1)])
   +- LogicalProject(cnt=[$1], b=[$0])
      +- LogicalFilter(condition=[<($0, 4)])
         +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
            +- LogicalProject(b=[$1], a=[$0])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], changelogMode=[I,UB,UA], reuse_id=[1])
+- Exchange(distribution=[hash[b]], changelogMode=[I])
   +- Calc(select=[b, a], changelogMode=[I])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])

Calc(select=[b, cnt], where=[<(b, 4)], changelogMode=[I,UB,UA], reuse_id=[2])
+- Reused(reference_id=[1])

Sink(table=[default_catalog.default_database.retractSink], fields=[b, cnt], changelogMode=[NONE])
+- Reused(reference_id=[2])

Sink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt], changelogMode=[NONE])
+- Calc(select=[b, cnt], where=[AND(>=(b, 4), <(b, 6))], changelogMode=[I,UB,UA])
   +- Reused(reference_id=[1])

Sink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt], changelogMode=[NONE])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(b) AS frequency], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[cnt]], changelogMode=[I,UB,UA])
      +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(table=[default_catalog.default_database.retractSink], fields=[a, cnt], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[cnt, a])
+- LogicalAggregate(group=[{0}], a=[COUNT($1)])
   +- LogicalProject(cnt=[$1], a=[$0])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
         +- LogicalProject(a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(table=[default_catalog.default_database.retractSink], fields=[cnt, a], changelogMode=[NONE])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(a) AS a], changelogMode=[I,UB,UA,D])
   +- Exchange(distribution=[hash[cnt]], changelogMode=[I,UB,UA])
      +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
         +- Exchange(distribution=[hash[a]], changelogMode=[I])
            +- Calc(select=[a], changelogMode=[I])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSinkWithFilter">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt])
+- LogicalProject(a=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($1, 10)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
         +- LogicalProject(a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt], changelogMode=[NONE])
+- Calc(select=[a, cnt], where=[<(cnt, 10)], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[a]], changelogMode=[I])
         +- Calc(select=[a], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
	<TestCase name="testSinkDisorderChangeLogWithJoin">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])
+- LogicalProject(person=[$0], sum_votes=[$1], prize=[$3])
   +- LogicalFilter(condition=[=($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, src]])
         +- LogicalTableScan(table=[[default_catalog, default_database, award]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])
+- Calc(select=[person, sum_votes, prize])
   +- Join(joinType=[InnerJoin], where=[=(sum_votes, votes)], select=[person, sum_votes, votes, prize], leftInputSpec=[HasUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
      :- Exchange(distribution=[hash[sum_votes]])
      :  +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
      :     +- Exchange(distribution=[hash[person]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])
      +- Exchange(distribution=[hash[votes]])
         +- TableSourceScan(table=[[default_catalog, default_database, award]], fields=[votes, prize])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='SinkMaterializer(pk=[person]', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
		PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
			OneInputTransformation{name='Calc(select=[person, sum_votes, prize])', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
				TwoInputTransformation{name='Join(joinType=[InnerJoin], where=[(sum_votes = votes)], select=[person, sum_votes, votes, prize], leftInputSpec=[HasUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])', outputType=RowData(person: STRING, sum_votes: BIGINT, votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
					PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
						OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
							PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
								FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
									LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
					PartitionTransformation{name='Partition', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
						FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
							LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, award]], fields=[votes, prize])', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=1}
]]>
		</Resource>
	</TestCase>
	<TestCase name="testSinkDisorderChangeLogWithRank">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])
+- LogicalProject(person=[$0], sum_votes=[$1])
   +- LogicalFilter(condition=[<($2, 10)])
      +- LogicalProject(person=[$0], sum_votes=[$1], rank_number=[ROW_NUMBER() OVER (PARTITION BY /($1, 2) ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         +- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
            +- LogicalTableScan(table=[[default_catalog, default_database, src]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])
+- Calc(select=[person, sum_votes])
   +- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[$2], orderBy=[sum_votes DESC], select=[person, sum_votes, $2])
      +- Exchange(distribution=[hash[$2]])
         +- Calc(select=[person, sum_votes, /(sum_votes, 2) AS $2])
            +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
               +- Exchange(distribution=[hash[person]])
                  +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='SinkMaterializer(pk=[person]', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
		PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
			OneInputTransformation{name='Calc(select=[person, sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
				OneInputTransformation{name='Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[$2], orderBy=[sum_votes DESC], select=[person, sum_votes, $2], function=[RetractableTopNFunction])', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
					PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
						OneInputTransformation{name='Calc(select=[person, sum_votes, (sum_votes / 2) AS $2])', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
							OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
								PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
									FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
										LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
]]>
		</Resource>
	</TestCase>
	<TestCase name="testSinkDisorderChangeLogWithJoinAndAutoInferUpsert">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])
+- LogicalProject(person=[$0], sum_votes=[$1], prize=[$3])
   +- LogicalFilter(condition=[=($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, src]])
         +- LogicalTableScan(table=[[default_catalog, default_database, award]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])
+- Calc(select=[person, sum_votes, prize])
   +- Join(joinType=[InnerJoin], where=[=(sum_votes, votes)], select=[person, sum_votes, votes, prize], leftInputSpec=[HasUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
      :- Exchange(distribution=[hash[sum_votes]])
      :  +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
      :     +- Exchange(distribution=[hash[person]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])
      +- Exchange(distribution=[hash[votes]])
         +- TableSourceScan(table=[[default_catalog, default_database, award]], fields=[votes, prize])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, votes, prize])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='SinkMaterializer(pk=[person]', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
		PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
			OneInputTransformation{name='Calc(select=[person, sum_votes, prize])', outputType=RowData(person: STRING, sum_votes: BIGINT, prize: DOUBLE), parallelism=-1}
				TwoInputTransformation{name='Join(joinType=[InnerJoin], where=[(sum_votes = votes)], select=[person, sum_votes, votes, prize], leftInputSpec=[HasUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])', outputType=RowData(person: STRING, sum_votes: BIGINT, votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
					PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
						OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
							PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
								FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
									LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
					PartitionTransformation{name='Partition', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
						FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=-1}
							LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, award]], fields=[votes, prize])', outputType=RowData(votes: BIGINT NOT NULL, prize: DOUBLE), parallelism=1}
]]>
		</Resource>
	</TestCase>
	<TestCase name="testSinkDisorderChangeLogWithRankAndAutoInferUpsert">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])
+- LogicalProject(person=[$0], sum_votes=[$1])
   +- LogicalFilter(condition=[<($2, 10)])
      +- LogicalProject(person=[$0], sum_votes=[$1], rank_number=[ROW_NUMBER() OVER (PARTITION BY /($1, 2) ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         +- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
            +- LogicalTableScan(table=[[default_catalog, default_database, src]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])
+- Calc(select=[person, sum_votes])
   +- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[$2], orderBy=[sum_votes DESC], select=[person, sum_votes, $2])
      +- Exchange(distribution=[hash[$2]])
         +- Calc(select=[person, sum_votes, /(sum_votes, 2) AS $2])
            +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
               +- Exchange(distribution=[hash[person]])
                  +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, votes])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='SinkMaterializer(pk=[person]', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
		PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
			OneInputTransformation{name='Calc(select=[person, sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
				OneInputTransformation{name='Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[$2], orderBy=[sum_votes DESC], select=[person, sum_votes, $2], function=[RetractableTopNFunction])', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
					PartitionTransformation{name='Partition', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
						OneInputTransformation{name='Calc(select=[person, sum_votes, (sum_votes / 2) AS $2])', outputType=RowData(person: STRING, sum_votes: BIGINT, $2: BIGINT), parallelism=-1}
							OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])', outputType=RowData(person: STRING, sum_votes: BIGINT), parallelism=-1}
								PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
									FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
										LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
]]>
		</Resource>
	</TestCase>
	<TestCase name="testUpsertKeyEqualsPrimaryKeyAndAutoInferUpsert">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, votes])
+- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
   +- LogicalTableScan(table=[[default_catalog, default_database, src]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, votes])
+- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS EXPR$1])
   +- Exchange(distribution=[hash[person]])
      +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, votes])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS EXPR$1])', outputType=RowData(person: STRING, EXPR$1: BIGINT), parallelism=-1}
		PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
			FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
				LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
]]>
		</Resource>
	</TestCase>
	<TestCase name="testUpsertKeyInPrimaryKeyAndAutoInferUpsert">
		<Resource name="planBefore">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, idx, votes])
+- LogicalProject(person=[$0], idx=[$0], EXPR$2=[$1])
   +- LogicalAggregate(group=[{0}], EXPR$2=[SUM($1)])
      +- LogicalTableScan(table=[[default_catalog, default_database, src]])
]]>
		</Resource>
		<Resource name="planAfter">
			<![CDATA[
Sink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, idx, votes])
+- Calc(select=[person, person AS idx, EXPR$2])
   +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS EXPR$2])
      +- Exchange(distribution=[hash[person]])
         +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])

SinkTransformation{name='Sink(table=[default_catalog.default_database.SinkSumChangeLog], fields=[person, idx, votes])', outputType=GenericType<java.lang.Object>, parallelism=-1}
	OneInputTransformation{name='Calc(select=[person, person AS idx, EXPR$2])', outputType=RowData(person: STRING, idx: STRING, EXPR$2: BIGINT), parallelism=-1}
		OneInputTransformation{name='GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS EXPR$2])', outputType=RowData(person: STRING, EXPR$2: BIGINT), parallelism=-1}
			PartitionTransformation{name='Partition', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
				FakeTransformation{name='ChangeToDefaultParallel', outputType=RowData(person: STRING, votes: BIGINT), parallelism=-1}
					LegacySourceTransformation{name='TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])', outputType=RowData(person: STRING, votes: BIGINT), parallelism=1}
]]>
		</Resource>
	</TestCase>
    <TestCase name="testInsertPartColumn">
        <Resource name="planBefore">
            <![CDATA[
LogicalSink(table=[default_catalog.default_database.zm_test], fields=[a, m1, m2, m3, m4])
+- LogicalProject(a=[CAST($0):BIGINT], m1=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m2=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m4=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
Sink(table=[default_catalog.default_database.zm_test], fields=[a, m1, m2, m3, m4])
+- Calc(select=[CAST(a) AS a, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m1, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m2, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m3, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m4])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c])
]]>
        </Resource>
    </TestCase>
</Root>

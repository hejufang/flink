/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connectors.loghouse.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-10")
public class BaseResp implements org.apache.thrift.TBase<BaseResp, BaseResp._Fields>, java.io.Serializable, Cloneable, Comparable<BaseResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseResp");

  private static final org.apache.thrift.protocol.TField STATUS_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("StatusMessage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("StatusCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("Extra", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BaseRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BaseRespTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String StatusMessage; // required
  public int StatusCode; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS_MESSAGE((short)1, "StatusMessage"),
    STATUS_CODE((short)2, "StatusCode"),
    EXTRA((short)3, "Extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_MESSAGE
          return STATUS_MESSAGE;
        case 2: // STATUS_CODE
          return STATUS_CODE;
        case 3: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUSCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("StatusMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("StatusCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("Extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseResp.class, metaDataMap);
  }

  public BaseResp() {
    this.StatusMessage = "";

    this.StatusCode = 0;

  }

  public BaseResp(
    java.lang.String StatusMessage,
    int StatusCode)
  {
    this();
    this.StatusMessage = StatusMessage;
    this.StatusCode = StatusCode;
    setStatusCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseResp(BaseResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatusMessage()) {
      this.StatusMessage = other.StatusMessage;
    }
    this.StatusCode = other.StatusCode;
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.lang.String> __this__Extra = new java.util.HashMap<java.lang.String,java.lang.String>(other.Extra);
      this.Extra = __this__Extra;
    }
  }

  public BaseResp deepCopy() {
    return new BaseResp(this);
  }

  @Override
  public void clear() {
    this.StatusMessage = "";

    this.StatusCode = 0;

    this.Extra = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatusMessage() {
    return this.StatusMessage;
  }

  public BaseResp setStatusMessage(@org.apache.thrift.annotation.Nullable java.lang.String StatusMessage) {
    this.StatusMessage = StatusMessage;
    return this;
  }

  public void unsetStatusMessage() {
    this.StatusMessage = null;
  }

  /** Returns true if field StatusMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMessage() {
    return this.StatusMessage != null;
  }

  public void setStatusMessageIsSet(boolean value) {
    if (!value) {
      this.StatusMessage = null;
    }
  }

  public int getStatusCode() {
    return this.StatusCode;
  }

  public BaseResp setStatusCode(int StatusCode) {
    this.StatusCode = StatusCode;
    setStatusCodeIsSet(true);
    return this;
  }

  public void unsetStatusCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
  }

  /** Returns true if field StatusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCODE_ISSET_ID);
  }

  public void setStatusCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCODE_ISSET_ID, value);
  }

  public int getExtraSize() {
    return (this.Extra == null) ? 0 : this.Extra.size();
  }

  public void putToExtra(java.lang.String key, java.lang.String val) {
    if (this.Extra == null) {
      this.Extra = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.Extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtra() {
    return this.Extra;
  }

  public BaseResp setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> Extra) {
    this.Extra = Extra;
    return this;
  }

  public void unsetExtra() {
    this.Extra = null;
  }

  /** Returns true if field Extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.Extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.Extra = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS_MESSAGE:
      if (value == null) {
        unsetStatusMessage();
      } else {
        setStatusMessage((java.lang.String)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((java.lang.Integer)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_MESSAGE:
      return getStatusMessage();

    case STATUS_CODE:
      return getStatusCode();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS_MESSAGE:
      return isSetStatusMessage();
    case STATUS_CODE:
      return isSetStatusCode();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseResp)
      return this.equals((BaseResp)that);
    return false;
  }

  public boolean equals(BaseResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_StatusMessage = true && this.isSetStatusMessage();
    boolean that_present_StatusMessage = true && that.isSetStatusMessage();
    if (this_present_StatusMessage || that_present_StatusMessage) {
      if (!(this_present_StatusMessage && that_present_StatusMessage))
        return false;
      if (!this.StatusMessage.equals(that.StatusMessage))
        return false;
    }

    boolean this_present_StatusCode = true;
    boolean that_present_StatusCode = true;
    if (this_present_StatusCode || that_present_StatusCode) {
      if (!(this_present_StatusCode && that_present_StatusCode))
        return false;
      if (this.StatusCode != that.StatusCode)
        return false;
    }

    boolean this_present_Extra = true && this.isSetExtra();
    boolean that_present_Extra = true && that.isSetExtra();
    if (this_present_Extra || that_present_Extra) {
      if (!(this_present_Extra && that_present_Extra))
        return false;
      if (!this.Extra.equals(that.Extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatusMessage()) ? 131071 : 524287);
    if (isSetStatusMessage())
      hashCode = hashCode * 8191 + StatusMessage.hashCode();

    hashCode = hashCode * 8191 + StatusCode;

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + Extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BaseResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatusMessage()).compareTo(other.isSetStatusMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StatusMessage, other.StatusMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatusCode()).compareTo(other.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StatusCode, other.StatusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Extra, other.Extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BaseResp(");
    boolean first = true;

    sb.append("StatusMessage:");
    if (this.StatusMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.StatusMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("StatusCode:");
    sb.append(this.StatusCode);
    first = false;
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("Extra:");
      if (this.Extra == null) {
        sb.append("null");
      } else {
        sb.append(this.Extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BaseRespStandardScheme getScheme() {
      return new BaseRespStandardScheme();
    }
  }

  private static class BaseRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<BaseResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.StatusMessage = iprot.readString();
              struct.setStatusMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.StatusCode = iprot.readI32();
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.Extra = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                @org.apache.thrift.annotation.Nullable java.lang.String _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readString();
                  _val12 = iprot.readString();
                  struct.Extra.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.StatusMessage != null) {
        oprot.writeFieldBegin(STATUS_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.StatusMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
      oprot.writeI32(struct.StatusCode);
      oprot.writeFieldEnd();
      if (struct.Extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.Extra.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BaseRespTupleScheme getScheme() {
      return new BaseRespTupleScheme();
    }
  }

  private static class BaseRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<BaseResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatusMessage()) {
        optionals.set(0);
      }
      if (struct.isSetStatusCode()) {
        optionals.set(1);
      }
      if (struct.isSetExtra()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatusMessage()) {
        oprot.writeString(struct.StatusMessage);
      }
      if (struct.isSetStatusCode()) {
        oprot.writeI32(struct.StatusCode);
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.Extra.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.Extra.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.StatusMessage = iprot.readString();
        struct.setStatusMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.StatusCode = iprot.readI32();
        struct.setStatusCodeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.Extra = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key17;
          @org.apache.thrift.annotation.Nullable java.lang.String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.Extra.put(_key17, _val18);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


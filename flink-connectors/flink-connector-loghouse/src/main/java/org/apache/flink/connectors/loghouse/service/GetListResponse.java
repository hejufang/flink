/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connectors.loghouse.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-10")
public class GetListResponse implements org.apache.thrift.TBase<GetListResponse, GetListResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetListResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetListResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("valueMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("errorKeys", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("BaseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetListResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetListResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Status status; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> valueMap; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> errorKeys; // required
  public @org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.BaseResp BaseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    VALUE_MAP((short)2, "valueMap"),
    ERROR_KEYS((short)3, "errorKeys"),
    BASE_RESP((short)255, "BaseResp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // VALUE_MAP
          return VALUE_MAP;
        case 3: // ERROR_KEYS
          return ERROR_KEYS;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)));
    tmpMap.put(_Fields.VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("valueMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.ERROR_KEYS, new org.apache.thrift.meta_data.FieldMetaData("errorKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("BaseResp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.flink.connectors.loghouse.service.BaseResp.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetListResponse.class, metaDataMap);
  }

  public GetListResponse() {
  }

  public GetListResponse(
    Status status,
    java.util.Map<java.lang.String,java.nio.ByteBuffer> valueMap,
    java.util.List<java.lang.String> errorKeys,
    org.apache.flink.connectors.loghouse.service.BaseResp BaseResp)
  {
    this();
    this.status = status;
    this.valueMap = valueMap;
    this.errorKeys = errorKeys;
    this.BaseResp = BaseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetListResponse(GetListResponse other) {
    if (other.isSetStatus()) {
      this.status = new Status(other.status);
    }
    if (other.isSetValueMap()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__valueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.valueMap);
      this.valueMap = __this__valueMap;
    }
    if (other.isSetErrorKeys()) {
      java.util.List<java.lang.String> __this__errorKeys = new java.util.ArrayList<java.lang.String>(other.errorKeys);
      this.errorKeys = __this__errorKeys;
    }
    if (other.isSetBaseResp()) {
      this.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp(other.BaseResp);
    }
  }

  public GetListResponse deepCopy() {
    return new GetListResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.valueMap = null;
    this.errorKeys = null;
    this.BaseResp = null;
  }

  @org.apache.thrift.annotation.Nullable
  public Status getStatus() {
    return this.status;
  }

  public GetListResponse setStatus(@org.apache.thrift.annotation.Nullable Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getValueMapSize() {
    return (this.valueMap == null) ? 0 : this.valueMap.size();
  }

  public void putToValueMap(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.valueMap == null) {
      this.valueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.valueMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getValueMap() {
    return this.valueMap;
  }

  public GetListResponse setValueMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> valueMap) {
    this.valueMap = valueMap;
    return this;
  }

  public void unsetValueMap() {
    this.valueMap = null;
  }

  /** Returns true if field valueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetValueMap() {
    return this.valueMap != null;
  }

  public void setValueMapIsSet(boolean value) {
    if (!value) {
      this.valueMap = null;
    }
  }

  public int getErrorKeysSize() {
    return (this.errorKeys == null) ? 0 : this.errorKeys.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getErrorKeysIterator() {
    return (this.errorKeys == null) ? null : this.errorKeys.iterator();
  }

  public void addToErrorKeys(java.lang.String elem) {
    if (this.errorKeys == null) {
      this.errorKeys = new java.util.ArrayList<java.lang.String>();
    }
    this.errorKeys.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getErrorKeys() {
    return this.errorKeys;
  }

  public GetListResponse setErrorKeys(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> errorKeys) {
    this.errorKeys = errorKeys;
    return this;
  }

  public void unsetErrorKeys() {
    this.errorKeys = null;
  }

  /** Returns true if field errorKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorKeys() {
    return this.errorKeys != null;
  }

  public void setErrorKeysIsSet(boolean value) {
    if (!value) {
      this.errorKeys = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.flink.connectors.loghouse.service.BaseResp getBaseResp() {
    return this.BaseResp;
  }

  public GetListResponse setBaseResp(@org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.BaseResp BaseResp) {
    this.BaseResp = BaseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.BaseResp = null;
  }

  /** Returns true if field BaseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.BaseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.BaseResp = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case VALUE_MAP:
      if (value == null) {
        unsetValueMap();
      } else {
        setValueMap((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    case ERROR_KEYS:
      if (value == null) {
        unsetErrorKeys();
      } else {
        setErrorKeys((java.util.List<java.lang.String>)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((org.apache.flink.connectors.loghouse.service.BaseResp)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case VALUE_MAP:
      return getValueMap();

    case ERROR_KEYS:
      return getErrorKeys();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case VALUE_MAP:
      return isSetValueMap();
    case ERROR_KEYS:
      return isSetErrorKeys();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GetListResponse)
      return this.equals((GetListResponse)that);
    return false;
  }

  public boolean equals(GetListResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_valueMap = true && this.isSetValueMap();
    boolean that_present_valueMap = true && that.isSetValueMap();
    if (this_present_valueMap || that_present_valueMap) {
      if (!(this_present_valueMap && that_present_valueMap))
        return false;
      if (!this.valueMap.equals(that.valueMap))
        return false;
    }

    boolean this_present_errorKeys = true && this.isSetErrorKeys();
    boolean that_present_errorKeys = true && that.isSetErrorKeys();
    if (this_present_errorKeys || that_present_errorKeys) {
      if (!(this_present_errorKeys && that_present_errorKeys))
        return false;
      if (!this.errorKeys.equals(that.errorKeys))
        return false;
    }

    boolean this_present_BaseResp = true && this.isSetBaseResp();
    boolean that_present_BaseResp = true && that.isSetBaseResp();
    if (this_present_BaseResp || that_present_BaseResp) {
      if (!(this_present_BaseResp && that_present_BaseResp))
        return false;
      if (!this.BaseResp.equals(that.BaseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetValueMap()) ? 131071 : 524287);
    if (isSetValueMap())
      hashCode = hashCode * 8191 + valueMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorKeys()) ? 131071 : 524287);
    if (isSetErrorKeys())
      hashCode = hashCode * 8191 + errorKeys.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaseResp()) ? 131071 : 524287);
    if (isSetBaseResp())
      hashCode = hashCode * 8191 + BaseResp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetListResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValueMap()).compareTo(other.isSetValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueMap, other.valueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorKeys()).compareTo(other.isSetErrorKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorKeys, other.errorKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BaseResp, other.BaseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetListResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueMap:");
    if (this.valueMap == null) {
      sb.append("null");
    } else {
      sb.append(this.valueMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorKeys:");
    if (this.errorKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.errorKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BaseResp:");
    if (this.BaseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.BaseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (BaseResp != null) {
      BaseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetListResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetListResponseStandardScheme getScheme() {
      return new GetListResponseStandardScheme();
    }
  }

  private static class GetListResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetListResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new Status();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                struct.valueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map50.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key51;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val52;
                for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                {
                  _key51 = iprot.readString();
                  _val52 = iprot.readBinary();
                  struct.valueMap.put(_key51, _val52);
                }
                iprot.readMapEnd();
              }
              struct.setValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.errorKeys = new java.util.ArrayList<java.lang.String>(_list54.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.errorKeys.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setErrorKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp();
              struct.BaseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetListResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.valueMap != null) {
        oprot.writeFieldBegin(VALUE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.valueMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter57 : struct.valueMap.entrySet())
          {
            oprot.writeString(_iter57.getKey());
            oprot.writeBinary(_iter57.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.errorKeys != null) {
        oprot.writeFieldBegin(ERROR_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.errorKeys.size()));
          for (java.lang.String _iter58 : struct.errorKeys)
          {
            oprot.writeString(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BaseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.BaseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetListResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetListResponseTupleScheme getScheme() {
      return new GetListResponseTupleScheme();
    }
  }

  private static class GetListResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetListResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetValueMap()) {
        optionals.set(1);
      }
      if (struct.isSetErrorKeys()) {
        optionals.set(2);
      }
      if (struct.isSetBaseResp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetValueMap()) {
        {
          oprot.writeI32(struct.valueMap.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter59 : struct.valueMap.entrySet())
          {
            oprot.writeString(_iter59.getKey());
            oprot.writeBinary(_iter59.getValue());
          }
        }
      }
      if (struct.isSetErrorKeys()) {
        {
          oprot.writeI32(struct.errorKeys.size());
          for (java.lang.String _iter60 : struct.errorKeys)
          {
            oprot.writeString(_iter60);
          }
        }
      }
      if (struct.isSetBaseResp()) {
        struct.BaseResp.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = new Status();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map61 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.valueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map61.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key62;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val63;
          for (int _i64 = 0; _i64 < _map61.size; ++_i64)
          {
            _key62 = iprot.readString();
            _val63 = iprot.readBinary();
            struct.valueMap.put(_key62, _val63);
          }
        }
        struct.setValueMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.errorKeys = new java.util.ArrayList<java.lang.String>(_list65.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readString();
            struct.errorKeys.add(_elem66);
          }
        }
        struct.setErrorKeysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp();
        struct.BaseResp.read(iprot);
        struct.setBaseRespIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


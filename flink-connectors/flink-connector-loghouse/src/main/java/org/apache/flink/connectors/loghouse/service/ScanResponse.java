/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connectors.loghouse.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-10")
public class ScanResponse implements org.apache.thrift.TBase<ScanResponse, ScanResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ScanResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScanResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("records", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ERROR_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("errorKeys", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("BaseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ScanResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ScanResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Status status; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Pair> records; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Key> errorKeys; // required
  public @org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.BaseResp BaseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    SESSION_ID((short)2, "sessionId"),
    RECORDS((short)3, "records"),
    ERROR_KEYS((short)4, "errorKeys"),
    BASE_RESP((short)255, "BaseResp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // SESSION_ID
          return SESSION_ID;
        case 3: // RECORDS
          return RECORDS;
        case 4: // ERROR_KEYS
          return ERROR_KEYS;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Status.class)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORDS, new org.apache.thrift.meta_data.FieldMetaData("records", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pair.class))));
    tmpMap.put(_Fields.ERROR_KEYS, new org.apache.thrift.meta_data.FieldMetaData("errorKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Key.class))));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("BaseResp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.flink.connectors.loghouse.service.BaseResp.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScanResponse.class, metaDataMap);
  }

  public ScanResponse() {
  }

  public ScanResponse(
    Status status,
    java.lang.String sessionId,
    java.util.List<Pair> records,
    java.util.List<Key> errorKeys,
    org.apache.flink.connectors.loghouse.service.BaseResp BaseResp)
  {
    this();
    this.status = status;
    this.sessionId = sessionId;
    this.records = records;
    this.errorKeys = errorKeys;
    this.BaseResp = BaseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanResponse(ScanResponse other) {
    if (other.isSetStatus()) {
      this.status = new Status(other.status);
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetRecords()) {
      java.util.List<Pair> __this__records = new java.util.ArrayList<Pair>(other.records.size());
      for (Pair other_element : other.records) {
        __this__records.add(new Pair(other_element));
      }
      this.records = __this__records;
    }
    if (other.isSetErrorKeys()) {
      java.util.List<Key> __this__errorKeys = new java.util.ArrayList<Key>(other.errorKeys.size());
      for (Key other_element : other.errorKeys) {
        __this__errorKeys.add(new Key(other_element));
      }
      this.errorKeys = __this__errorKeys;
    }
    if (other.isSetBaseResp()) {
      this.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp(other.BaseResp);
    }
  }

  public ScanResponse deepCopy() {
    return new ScanResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.sessionId = null;
    this.records = null;
    this.errorKeys = null;
    this.BaseResp = null;
  }

  @org.apache.thrift.annotation.Nullable
  public Status getStatus() {
    return this.status;
  }

  public ScanResponse setStatus(@org.apache.thrift.annotation.Nullable Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSessionId() {
    return this.sessionId;
  }

  public ScanResponse setSessionId(@org.apache.thrift.annotation.Nullable java.lang.String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public int getRecordsSize() {
    return (this.records == null) ? 0 : this.records.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Pair> getRecordsIterator() {
    return (this.records == null) ? null : this.records.iterator();
  }

  public void addToRecords(Pair elem) {
    if (this.records == null) {
      this.records = new java.util.ArrayList<Pair>();
    }
    this.records.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Pair> getRecords() {
    return this.records;
  }

  public ScanResponse setRecords(@org.apache.thrift.annotation.Nullable java.util.List<Pair> records) {
    this.records = records;
    return this;
  }

  public void unsetRecords() {
    this.records = null;
  }

  /** Returns true if field records is set (has been assigned a value) and false otherwise */
  public boolean isSetRecords() {
    return this.records != null;
  }

  public void setRecordsIsSet(boolean value) {
    if (!value) {
      this.records = null;
    }
  }

  public int getErrorKeysSize() {
    return (this.errorKeys == null) ? 0 : this.errorKeys.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Key> getErrorKeysIterator() {
    return (this.errorKeys == null) ? null : this.errorKeys.iterator();
  }

  public void addToErrorKeys(Key elem) {
    if (this.errorKeys == null) {
      this.errorKeys = new java.util.ArrayList<Key>();
    }
    this.errorKeys.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Key> getErrorKeys() {
    return this.errorKeys;
  }

  public ScanResponse setErrorKeys(@org.apache.thrift.annotation.Nullable java.util.List<Key> errorKeys) {
    this.errorKeys = errorKeys;
    return this;
  }

  public void unsetErrorKeys() {
    this.errorKeys = null;
  }

  /** Returns true if field errorKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorKeys() {
    return this.errorKeys != null;
  }

  public void setErrorKeysIsSet(boolean value) {
    if (!value) {
      this.errorKeys = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.flink.connectors.loghouse.service.BaseResp getBaseResp() {
    return this.BaseResp;
  }

  public ScanResponse setBaseResp(@org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.BaseResp BaseResp) {
    this.BaseResp = BaseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.BaseResp = null;
  }

  /** Returns true if field BaseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.BaseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.BaseResp = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.String)value);
      }
      break;

    case RECORDS:
      if (value == null) {
        unsetRecords();
      } else {
        setRecords((java.util.List<Pair>)value);
      }
      break;

    case ERROR_KEYS:
      if (value == null) {
        unsetErrorKeys();
      } else {
        setErrorKeys((java.util.List<Key>)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((org.apache.flink.connectors.loghouse.service.BaseResp)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case SESSION_ID:
      return getSessionId();

    case RECORDS:
      return getRecords();

    case ERROR_KEYS:
      return getErrorKeys();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case SESSION_ID:
      return isSetSessionId();
    case RECORDS:
      return isSetRecords();
    case ERROR_KEYS:
      return isSetErrorKeys();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanResponse)
      return this.equals((ScanResponse)that);
    return false;
  }

  public boolean equals(ScanResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_records = true && this.isSetRecords();
    boolean that_present_records = true && that.isSetRecords();
    if (this_present_records || that_present_records) {
      if (!(this_present_records && that_present_records))
        return false;
      if (!this.records.equals(that.records))
        return false;
    }

    boolean this_present_errorKeys = true && this.isSetErrorKeys();
    boolean that_present_errorKeys = true && that.isSetErrorKeys();
    if (this_present_errorKeys || that_present_errorKeys) {
      if (!(this_present_errorKeys && that_present_errorKeys))
        return false;
      if (!this.errorKeys.equals(that.errorKeys))
        return false;
    }

    boolean this_present_BaseResp = true && this.isSetBaseResp();
    boolean that_present_BaseResp = true && that.isSetBaseResp();
    if (this_present_BaseResp || that_present_BaseResp) {
      if (!(this_present_BaseResp && that_present_BaseResp))
        return false;
      if (!this.BaseResp.equals(that.BaseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
    if (isSetSessionId())
      hashCode = hashCode * 8191 + sessionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecords()) ? 131071 : 524287);
    if (isSetRecords())
      hashCode = hashCode * 8191 + records.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorKeys()) ? 131071 : 524287);
    if (isSetErrorKeys())
      hashCode = hashCode * 8191 + errorKeys.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaseResp()) ? 131071 : 524287);
    if (isSetBaseResp())
      hashCode = hashCode * 8191 + BaseResp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ScanResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecords()).compareTo(other.isSetRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.records, other.records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorKeys()).compareTo(other.isSetErrorKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorKeys, other.errorKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BaseResp, other.BaseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ScanResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("records:");
    if (this.records == null) {
      sb.append("null");
    } else {
      sb.append(this.records);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorKeys:");
    if (this.errorKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.errorKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BaseResp:");
    if (this.BaseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.BaseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (BaseResp != null) {
      BaseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScanResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScanResponseStandardScheme getScheme() {
      return new ScanResponseStandardScheme();
    }
  }

  private static class ScanResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<ScanResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new Status();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.records = new java.util.ArrayList<Pair>(_list26.size);
                @org.apache.thrift.annotation.Nullable Pair _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new Pair();
                  _elem27.read(iprot);
                  struct.records.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERROR_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.errorKeys = new java.util.ArrayList<Key>(_list29.size);
                @org.apache.thrift.annotation.Nullable Key _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new Key();
                  _elem30.read(iprot);
                  struct.errorKeys.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setErrorKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp();
              struct.BaseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScanResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.records != null) {
        oprot.writeFieldBegin(RECORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.records.size()));
          for (Pair _iter32 : struct.records)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.errorKeys != null) {
        oprot.writeFieldBegin(ERROR_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.errorKeys.size()));
          for (Key _iter33 : struct.errorKeys)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BaseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.BaseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScanResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScanResponseTupleScheme getScheme() {
      return new ScanResponseTupleScheme();
    }
  }

  private static class ScanResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<ScanResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetSessionId()) {
        optionals.set(1);
      }
      if (struct.isSetRecords()) {
        optionals.set(2);
      }
      if (struct.isSetErrorKeys()) {
        optionals.set(3);
      }
      if (struct.isSetBaseResp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
      if (struct.isSetRecords()) {
        {
          oprot.writeI32(struct.records.size());
          for (Pair _iter34 : struct.records)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetErrorKeys()) {
        {
          oprot.writeI32(struct.errorKeys.size());
          for (Key _iter35 : struct.errorKeys)
          {
            _iter35.write(oprot);
          }
        }
      }
      if (struct.isSetBaseResp()) {
        struct.BaseResp.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = new Status();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.records = new java.util.ArrayList<Pair>(_list36.size);
          @org.apache.thrift.annotation.Nullable Pair _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = new Pair();
            _elem37.read(iprot);
            struct.records.add(_elem37);
          }
        }
        struct.setRecordsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.errorKeys = new java.util.ArrayList<Key>(_list39.size);
          @org.apache.thrift.annotation.Nullable Key _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new Key();
            _elem40.read(iprot);
            struct.errorKeys.add(_elem40);
          }
        }
        struct.setErrorKeysIsSet(true);
      }
      if (incoming.get(4)) {
        struct.BaseResp = new org.apache.flink.connectors.loghouse.service.BaseResp();
        struct.BaseResp.read(iprot);
        struct.setBaseRespIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


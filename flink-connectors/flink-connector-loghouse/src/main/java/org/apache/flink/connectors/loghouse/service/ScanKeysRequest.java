/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connectors.loghouse.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-10")
public class ScanKeysRequest implements org.apache.thrift.TBase<ScanKeysRequest, ScanKeysRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ScanKeysRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScanKeysRequest");

  private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REVERSE_FIELD_DESC = new org.apache.thrift.protocol.TField("reverse", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField START_CLUSTERING_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startClusteringKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("Base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ScanKeysRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ScanKeysRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String ns; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String partitionKey; // required
  public boolean reverse; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String startClusteringKey; // required
  public @org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.Base Base; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NS((short)1, "ns"),
    PARTITION_KEY((short)2, "partitionKey"),
    REVERSE((short)3, "reverse"),
    START_CLUSTERING_KEY((short)4, "startClusteringKey"),
    BASE((short)255, "Base");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NS
          return NS;
        case 2: // PARTITION_KEY
          return PARTITION_KEY;
        case 3: // REVERSE
          return REVERSE;
        case 4: // START_CLUSTERING_KEY
          return START_CLUSTERING_KEY;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVERSE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("partitionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVERSE, new org.apache.thrift.meta_data.FieldMetaData("reverse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_CLUSTERING_KEY, new org.apache.thrift.meta_data.FieldMetaData("startClusteringKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("Base", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.flink.connectors.loghouse.service.Base.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScanKeysRequest.class, metaDataMap);
  }

  public ScanKeysRequest() {
  }

  public ScanKeysRequest(
    java.lang.String ns,
    java.lang.String partitionKey,
    boolean reverse,
    java.lang.String startClusteringKey,
    org.apache.flink.connectors.loghouse.service.Base Base)
  {
    this();
    this.ns = ns;
    this.partitionKey = partitionKey;
    this.reverse = reverse;
    setReverseIsSet(true);
    this.startClusteringKey = startClusteringKey;
    this.Base = Base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanKeysRequest(ScanKeysRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNs()) {
      this.ns = other.ns;
    }
    if (other.isSetPartitionKey()) {
      this.partitionKey = other.partitionKey;
    }
    this.reverse = other.reverse;
    if (other.isSetStartClusteringKey()) {
      this.startClusteringKey = other.startClusteringKey;
    }
    if (other.isSetBase()) {
      this.Base = new org.apache.flink.connectors.loghouse.service.Base(other.Base);
    }
  }

  public ScanKeysRequest deepCopy() {
    return new ScanKeysRequest(this);
  }

  @Override
  public void clear() {
    this.ns = null;
    this.partitionKey = null;
    setReverseIsSet(false);
    this.reverse = false;
    this.startClusteringKey = null;
    this.Base = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNs() {
    return this.ns;
  }

  public ScanKeysRequest setNs(@org.apache.thrift.annotation.Nullable java.lang.String ns) {
    this.ns = ns;
    return this;
  }

  public void unsetNs() {
    this.ns = null;
  }

  /** Returns true if field ns is set (has been assigned a value) and false otherwise */
  public boolean isSetNs() {
    return this.ns != null;
  }

  public void setNsIsSet(boolean value) {
    if (!value) {
      this.ns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartitionKey() {
    return this.partitionKey;
  }

  public ScanKeysRequest setPartitionKey(@org.apache.thrift.annotation.Nullable java.lang.String partitionKey) {
    this.partitionKey = partitionKey;
    return this;
  }

  public void unsetPartitionKey() {
    this.partitionKey = null;
  }

  /** Returns true if field partitionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionKey() {
    return this.partitionKey != null;
  }

  public void setPartitionKeyIsSet(boolean value) {
    if (!value) {
      this.partitionKey = null;
    }
  }

  public boolean isReverse() {
    return this.reverse;
  }

  public ScanKeysRequest setReverse(boolean reverse) {
    this.reverse = reverse;
    setReverseIsSet(true);
    return this;
  }

  public void unsetReverse() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVERSE_ISSET_ID);
  }

  /** Returns true if field reverse is set (has been assigned a value) and false otherwise */
  public boolean isSetReverse() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVERSE_ISSET_ID);
  }

  public void setReverseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVERSE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStartClusteringKey() {
    return this.startClusteringKey;
  }

  public ScanKeysRequest setStartClusteringKey(@org.apache.thrift.annotation.Nullable java.lang.String startClusteringKey) {
    this.startClusteringKey = startClusteringKey;
    return this;
  }

  public void unsetStartClusteringKey() {
    this.startClusteringKey = null;
  }

  /** Returns true if field startClusteringKey is set (has been assigned a value) and false otherwise */
  public boolean isSetStartClusteringKey() {
    return this.startClusteringKey != null;
  }

  public void setStartClusteringKeyIsSet(boolean value) {
    if (!value) {
      this.startClusteringKey = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.flink.connectors.loghouse.service.Base getBase() {
    return this.Base;
  }

  public ScanKeysRequest setBase(@org.apache.thrift.annotation.Nullable org.apache.flink.connectors.loghouse.service.Base Base) {
    this.Base = Base;
    return this;
  }

  public void unsetBase() {
    this.Base = null;
  }

  /** Returns true if field Base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.Base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.Base = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NS:
      if (value == null) {
        unsetNs();
      } else {
        setNs((java.lang.String)value);
      }
      break;

    case PARTITION_KEY:
      if (value == null) {
        unsetPartitionKey();
      } else {
        setPartitionKey((java.lang.String)value);
      }
      break;

    case REVERSE:
      if (value == null) {
        unsetReverse();
      } else {
        setReverse((java.lang.Boolean)value);
      }
      break;

    case START_CLUSTERING_KEY:
      if (value == null) {
        unsetStartClusteringKey();
      } else {
        setStartClusteringKey((java.lang.String)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((org.apache.flink.connectors.loghouse.service.Base)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NS:
      return getNs();

    case PARTITION_KEY:
      return getPartitionKey();

    case REVERSE:
      return isReverse();

    case START_CLUSTERING_KEY:
      return getStartClusteringKey();

    case BASE:
      return getBase();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NS:
      return isSetNs();
    case PARTITION_KEY:
      return isSetPartitionKey();
    case REVERSE:
      return isSetReverse();
    case START_CLUSTERING_KEY:
      return isSetStartClusteringKey();
    case BASE:
      return isSetBase();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanKeysRequest)
      return this.equals((ScanKeysRequest)that);
    return false;
  }

  public boolean equals(ScanKeysRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ns = true && this.isSetNs();
    boolean that_present_ns = true && that.isSetNs();
    if (this_present_ns || that_present_ns) {
      if (!(this_present_ns && that_present_ns))
        return false;
      if (!this.ns.equals(that.ns))
        return false;
    }

    boolean this_present_partitionKey = true && this.isSetPartitionKey();
    boolean that_present_partitionKey = true && that.isSetPartitionKey();
    if (this_present_partitionKey || that_present_partitionKey) {
      if (!(this_present_partitionKey && that_present_partitionKey))
        return false;
      if (!this.partitionKey.equals(that.partitionKey))
        return false;
    }

    boolean this_present_reverse = true;
    boolean that_present_reverse = true;
    if (this_present_reverse || that_present_reverse) {
      if (!(this_present_reverse && that_present_reverse))
        return false;
      if (this.reverse != that.reverse)
        return false;
    }

    boolean this_present_startClusteringKey = true && this.isSetStartClusteringKey();
    boolean that_present_startClusteringKey = true && that.isSetStartClusteringKey();
    if (this_present_startClusteringKey || that_present_startClusteringKey) {
      if (!(this_present_startClusteringKey && that_present_startClusteringKey))
        return false;
      if (!this.startClusteringKey.equals(that.startClusteringKey))
        return false;
    }

    boolean this_present_Base = true && this.isSetBase();
    boolean that_present_Base = true && that.isSetBase();
    if (this_present_Base || that_present_Base) {
      if (!(this_present_Base && that_present_Base))
        return false;
      if (!this.Base.equals(that.Base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNs()) ? 131071 : 524287);
    if (isSetNs())
      hashCode = hashCode * 8191 + ns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitionKey()) ? 131071 : 524287);
    if (isSetPartitionKey())
      hashCode = hashCode * 8191 + partitionKey.hashCode();

    hashCode = hashCode * 8191 + ((reverse) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStartClusteringKey()) ? 131071 : 524287);
    if (isSetStartClusteringKey())
      hashCode = hashCode * 8191 + startClusteringKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetBase()) ? 131071 : 524287);
    if (isSetBase())
      hashCode = hashCode * 8191 + Base.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ScanKeysRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNs()).compareTo(other.isSetNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, other.ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPartitionKey()).compareTo(other.isSetPartitionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionKey, other.partitionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReverse()).compareTo(other.isSetReverse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReverse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reverse, other.reverse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartClusteringKey()).compareTo(other.isSetStartClusteringKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartClusteringKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startClusteringKey, other.startClusteringKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Base, other.Base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ScanKeysRequest(");
    boolean first = true;

    sb.append("ns:");
    if (this.ns == null) {
      sb.append("null");
    } else {
      sb.append(this.ns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionKey:");
    if (this.partitionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reverse:");
    sb.append(this.reverse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startClusteringKey:");
    if (this.startClusteringKey == null) {
      sb.append("null");
    } else {
      sb.append(this.startClusteringKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Base:");
    if (this.Base == null) {
      sb.append("null");
    } else {
      sb.append(this.Base);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (Base != null) {
      Base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScanKeysRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScanKeysRequestStandardScheme getScheme() {
      return new ScanKeysRequestStandardScheme();
    }
  }

  private static class ScanKeysRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ScanKeysRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScanKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ns = iprot.readString();
              struct.setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitionKey = iprot.readString();
              struct.setPartitionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REVERSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reverse = iprot.readBool();
              struct.setReverseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_CLUSTERING_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startClusteringKey = iprot.readString();
              struct.setStartClusteringKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Base = new org.apache.flink.connectors.loghouse.service.Base();
              struct.Base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScanKeysRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(struct.ns);
        oprot.writeFieldEnd();
      }
      if (struct.partitionKey != null) {
        oprot.writeFieldBegin(PARTITION_KEY_FIELD_DESC);
        oprot.writeString(struct.partitionKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVERSE_FIELD_DESC);
      oprot.writeBool(struct.reverse);
      oprot.writeFieldEnd();
      if (struct.startClusteringKey != null) {
        oprot.writeFieldBegin(START_CLUSTERING_KEY_FIELD_DESC);
        oprot.writeString(struct.startClusteringKey);
        oprot.writeFieldEnd();
      }
      if (struct.Base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.Base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScanKeysRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ScanKeysRequestTupleScheme getScheme() {
      return new ScanKeysRequestTupleScheme();
    }
  }

  private static class ScanKeysRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ScanKeysRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScanKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNs()) {
        optionals.set(0);
      }
      if (struct.isSetPartitionKey()) {
        optionals.set(1);
      }
      if (struct.isSetReverse()) {
        optionals.set(2);
      }
      if (struct.isSetStartClusteringKey()) {
        optionals.set(3);
      }
      if (struct.isSetBase()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNs()) {
        oprot.writeString(struct.ns);
      }
      if (struct.isSetPartitionKey()) {
        oprot.writeString(struct.partitionKey);
      }
      if (struct.isSetReverse()) {
        oprot.writeBool(struct.reverse);
      }
      if (struct.isSetStartClusteringKey()) {
        oprot.writeString(struct.startClusteringKey);
      }
      if (struct.isSetBase()) {
        struct.Base.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScanKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ns = iprot.readString();
        struct.setNsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partitionKey = iprot.readString();
        struct.setPartitionKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reverse = iprot.readBool();
        struct.setReverseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startClusteringKey = iprot.readString();
        struct.setStartClusteringKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Base = new org.apache.flink.connectors.loghouse.service.Base();
        struct.Base.read(iprot);
        struct.setBaseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


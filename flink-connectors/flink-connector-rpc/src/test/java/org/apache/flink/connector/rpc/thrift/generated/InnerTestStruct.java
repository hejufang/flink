/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connector.rpc.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-13")
public class InnerTestStruct implements org.apache.thrift.TBase<InnerTestStruct, InnerTestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<InnerTestStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InnerTestStruct");

  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVal", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("intVal", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("mapVal", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("listVal", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InnerTestStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InnerTestStructTupleSchemeFactory());
  }

  public boolean boolVal; // required
  public int intVal; // optional
  public Map<String,Long> mapVal; // optional
  public List<Long> listVal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAL((short)1, "boolVal"),
    INT_VAL((short)2, "intVal"),
    MAP_VAL((short)3, "mapVal"),
    LIST_VAL((short)4, "listVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAL
          return BOOL_VAL;
        case 2: // INT_VAL
          return INT_VAL;
        case 3: // MAP_VAL
          return MAP_VAL;
        case 4: // LIST_VAL
          return LIST_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLVAL_ISSET_ID = 0;
  private static final int __INTVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INT_VAL,_Fields.MAP_VAL,_Fields.LIST_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("boolVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("intVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAP_VAL, new org.apache.thrift.meta_data.FieldMetaData("mapVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIST_VAL, new org.apache.thrift.meta_data.FieldMetaData("listVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InnerTestStruct.class, metaDataMap);
  }

  public InnerTestStruct() {
    this.boolVal = false;

    this.intVal = 1;

  }

  public InnerTestStruct(
    boolean boolVal)
  {
    this();
    this.boolVal = boolVal;
    setBoolValIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InnerTestStruct(InnerTestStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolVal = other.boolVal;
    this.intVal = other.intVal;
    if (other.isSetMapVal()) {
      Map<String,Long> __this__mapVal = new HashMap<String,Long>(other.mapVal);
      this.mapVal = __this__mapVal;
    }
    if (other.isSetListVal()) {
      List<Long> __this__listVal = new ArrayList<Long>(other.listVal);
      this.listVal = __this__listVal;
    }
  }

  public InnerTestStruct deepCopy() {
    return new InnerTestStruct(this);
  }

  @Override
  public void clear() {
    this.boolVal = false;

    this.intVal = 1;

    this.mapVal = null;
    this.listVal = null;
  }

  public boolean isBoolVal() {
    return this.boolVal;
  }

  public InnerTestStruct setBoolVal(boolean boolVal) {
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    return this;
  }

  public void unsetBoolVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLVAL_ISSET_ID);
  }

  /** Returns true if field boolVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLVAL_ISSET_ID);
  }

  public void setBoolValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLVAL_ISSET_ID, value);
  }

  public int getIntVal() {
    return this.intVal;
  }

  public InnerTestStruct setIntVal(int intVal) {
    this.intVal = intVal;
    setIntValIsSet(true);
    return this;
  }

  public void unsetIntVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTVAL_ISSET_ID);
  }

  /** Returns true if field intVal is set (has been assigned a value) and false otherwise */
  public boolean isSetIntVal() {
    return EncodingUtils.testBit(__isset_bitfield, __INTVAL_ISSET_ID);
  }

  public void setIntValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTVAL_ISSET_ID, value);
  }

  public int getMapValSize() {
    return (this.mapVal == null) ? 0 : this.mapVal.size();
  }

  public void putToMapVal(String key, long val) {
    if (this.mapVal == null) {
      this.mapVal = new HashMap<String,Long>();
    }
    this.mapVal.put(key, val);
  }

  public Map<String,Long> getMapVal() {
    return this.mapVal;
  }

  public InnerTestStruct setMapVal(Map<String,Long> mapVal) {
    this.mapVal = mapVal;
    return this;
  }

  public void unsetMapVal() {
    this.mapVal = null;
  }

  /** Returns true if field mapVal is set (has been assigned a value) and false otherwise */
  public boolean isSetMapVal() {
    return this.mapVal != null;
  }

  public void setMapValIsSet(boolean value) {
    if (!value) {
      this.mapVal = null;
    }
  }

  public int getListValSize() {
    return (this.listVal == null) ? 0 : this.listVal.size();
  }

  public java.util.Iterator<Long> getListValIterator() {
    return (this.listVal == null) ? null : this.listVal.iterator();
  }

  public void addToListVal(long elem) {
    if (this.listVal == null) {
      this.listVal = new ArrayList<Long>();
    }
    this.listVal.add(elem);
  }

  public List<Long> getListVal() {
    return this.listVal;
  }

  public InnerTestStruct setListVal(List<Long> listVal) {
    this.listVal = listVal;
    return this;
  }

  public void unsetListVal() {
    this.listVal = null;
  }

  /** Returns true if field listVal is set (has been assigned a value) and false otherwise */
  public boolean isSetListVal() {
    return this.listVal != null;
  }

  public void setListValIsSet(boolean value) {
    if (!value) {
      this.listVal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_VAL:
      if (value == null) {
        unsetBoolVal();
      } else {
        setBoolVal((Boolean)value);
      }
      break;

    case INT_VAL:
      if (value == null) {
        unsetIntVal();
      } else {
        setIntVal((Integer)value);
      }
      break;

    case MAP_VAL:
      if (value == null) {
        unsetMapVal();
      } else {
        setMapVal((Map<String,Long>)value);
      }
      break;

    case LIST_VAL:
      if (value == null) {
        unsetListVal();
      } else {
        setListVal((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_VAL:
      return isBoolVal();

    case INT_VAL:
      return getIntVal();

    case MAP_VAL:
      return getMapVal();

    case LIST_VAL:
      return getListVal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_VAL:
      return isSetBoolVal();
    case INT_VAL:
      return isSetIntVal();
    case MAP_VAL:
      return isSetMapVal();
    case LIST_VAL:
      return isSetListVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InnerTestStruct)
      return this.equals((InnerTestStruct)that);
    return false;
  }

  public boolean equals(InnerTestStruct that) {
    if (that == null)
      return false;

    boolean this_present_boolVal = true;
    boolean that_present_boolVal = true;
    if (this_present_boolVal || that_present_boolVal) {
      if (!(this_present_boolVal && that_present_boolVal))
        return false;
      if (this.boolVal != that.boolVal)
        return false;
    }

    boolean this_present_intVal = true && this.isSetIntVal();
    boolean that_present_intVal = true && that.isSetIntVal();
    if (this_present_intVal || that_present_intVal) {
      if (!(this_present_intVal && that_present_intVal))
        return false;
      if (this.intVal != that.intVal)
        return false;
    }

    boolean this_present_mapVal = true && this.isSetMapVal();
    boolean that_present_mapVal = true && that.isSetMapVal();
    if (this_present_mapVal || that_present_mapVal) {
      if (!(this_present_mapVal && that_present_mapVal))
        return false;
      if (!this.mapVal.equals(that.mapVal))
        return false;
    }

    boolean this_present_listVal = true && this.isSetListVal();
    boolean that_present_listVal = true && that.isSetListVal();
    if (this_present_listVal || that_present_listVal) {
      if (!(this_present_listVal && that_present_listVal))
        return false;
      if (!this.listVal.equals(that.listVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_boolVal = true;
    list.add(present_boolVal);
    if (present_boolVal)
      list.add(boolVal);

    boolean present_intVal = true && (isSetIntVal());
    list.add(present_intVal);
    if (present_intVal)
      list.add(intVal);

    boolean present_mapVal = true && (isSetMapVal());
    list.add(present_mapVal);
    if (present_mapVal)
      list.add(mapVal);

    boolean present_listVal = true && (isSetListVal());
    list.add(present_listVal);
    if (present_listVal)
      list.add(listVal);

    return list.hashCode();
  }

  @Override
  public int compareTo(InnerTestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolVal()).compareTo(other.isSetBoolVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolVal, other.boolVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntVal()).compareTo(other.isSetIntVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intVal, other.intVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapVal()).compareTo(other.isSetMapVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapVal, other.mapVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListVal()).compareTo(other.isSetListVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listVal, other.listVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InnerTestStruct(");
    boolean first = true;

    sb.append("boolVal:");
    sb.append(this.boolVal);
    first = false;
    if (isSetIntVal()) {
      if (!first) sb.append(", ");
      sb.append("intVal:");
      sb.append(this.intVal);
      first = false;
    }
    if (isSetMapVal()) {
      if (!first) sb.append(", ");
      sb.append("mapVal:");
      if (this.mapVal == null) {
        sb.append("null");
      } else {
        sb.append(this.mapVal);
      }
      first = false;
    }
    if (isSetListVal()) {
      if (!first) sb.append(", ");
      sb.append("listVal:");
      if (this.listVal == null) {
        sb.append("null");
      } else {
        sb.append(this.listVal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InnerTestStructStandardSchemeFactory implements SchemeFactory {
    public InnerTestStructStandardScheme getScheme() {
      return new InnerTestStructStandardScheme();
    }
  }

  private static class InnerTestStructStandardScheme extends StandardScheme<InnerTestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InnerTestStruct struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolVal = iprot.readBool();
              struct.setBoolValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intVal = iprot.readI32();
              struct.setIntValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.mapVal = new HashMap<String,Long>(2*_map10.size);
                String _key11;
                long _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readString();
                  _val12 = iprot.readI64();
                  struct.mapVal.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setMapValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIST_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.listVal = new ArrayList<Long>(_list14.size);
                long _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readI64();
                  struct.listVal.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setListValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InnerTestStruct struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
      oprot.writeBool(struct.boolVal);
      oprot.writeFieldEnd();
      if (struct.isSetIntVal()) {
        oprot.writeFieldBegin(INT_VAL_FIELD_DESC);
        oprot.writeI32(struct.intVal);
        oprot.writeFieldEnd();
      }
      if (struct.mapVal != null) {
        if (struct.isSetMapVal()) {
          oprot.writeFieldBegin(MAP_VAL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.mapVal.size()));
            for (Map.Entry<String, Long> _iter17 : struct.mapVal.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              oprot.writeI64(_iter17.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.listVal != null) {
        if (struct.isSetListVal()) {
          oprot.writeFieldBegin(LIST_VAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.listVal.size()));
            for (long _iter18 : struct.listVal)
            {
              oprot.writeI64(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InnerTestStructTupleSchemeFactory implements SchemeFactory {
    public InnerTestStructTupleScheme getScheme() {
      return new InnerTestStructTupleScheme();
    }
  }

  private static class InnerTestStructTupleScheme extends TupleScheme<InnerTestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InnerTestStruct struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolVal()) {
        optionals.set(0);
      }
      if (struct.isSetIntVal()) {
        optionals.set(1);
      }
      if (struct.isSetMapVal()) {
        optionals.set(2);
      }
      if (struct.isSetListVal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBoolVal()) {
        oprot.writeBool(struct.boolVal);
      }
      if (struct.isSetIntVal()) {
        oprot.writeI32(struct.intVal);
      }
      if (struct.isSetMapVal()) {
        {
          oprot.writeI32(struct.mapVal.size());
          for (Map.Entry<String, Long> _iter19 : struct.mapVal.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeI64(_iter19.getValue());
          }
        }
      }
      if (struct.isSetListVal()) {
        {
          oprot.writeI32(struct.listVal.size());
          for (long _iter20 : struct.listVal)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InnerTestStruct struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.boolVal = iprot.readBool();
        struct.setBoolValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.intVal = iprot.readI32();
        struct.setIntValIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map21 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mapVal = new HashMap<String,Long>(2*_map21.size);
          String _key22;
          long _val23;
          for (int _i24 = 0; _i24 < _map21.size; ++_i24)
          {
            _key22 = iprot.readString();
            _val23 = iprot.readI64();
            struct.mapVal.put(_key22, _val23);
          }
        }
        struct.setMapValIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.listVal = new ArrayList<Long>(_list25.size);
          long _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readI64();
            struct.listVal.add(_elem26);
          }
        }
        struct.setListValIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.connector.rpc.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2021-4-6")
public class TestStruct implements org.apache.thrift.TBase<TestStruct, TestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TestStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestStruct");

  private static final org.apache.thrift.protocol.TField STR_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("strVal", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INNER_TEST_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerTestStruct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_WITH_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("mapWithStruct", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_WITH_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("listWithStruct", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MAP_WITH_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mapWithList", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField LIST_WITH_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("listWithMap", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField NESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("nested", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField ENUM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("enumList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestStructTupleSchemeFactory());
  }

  public String strVal; // required
  public InnerTestStruct innerTestStruct; // optional
  public Map<String,SimpleStruct> mapWithStruct; // optional
  public List<SimpleStruct> listWithStruct; // optional
  public Map<String,List<Long>> mapWithList; // optional
  public List<Map<String,Integer>> listWithMap; // optional
  public Map<String,List<SimpleStruct>> nested; // optional
  public List<TestType> enumList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR_VAL((short)1, "strVal"),
    INNER_TEST_STRUCT((short)2, "innerTestStruct"),
    MAP_WITH_STRUCT((short)3, "mapWithStruct"),
    LIST_WITH_STRUCT((short)4, "listWithStruct"),
    MAP_WITH_LIST((short)5, "mapWithList"),
    LIST_WITH_MAP((short)6, "listWithMap"),
    NESTED((short)7, "nested"),
    ENUM_LIST((short)8, "enumList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR_VAL
          return STR_VAL;
        case 2: // INNER_TEST_STRUCT
          return INNER_TEST_STRUCT;
        case 3: // MAP_WITH_STRUCT
          return MAP_WITH_STRUCT;
        case 4: // LIST_WITH_STRUCT
          return LIST_WITH_STRUCT;
        case 5: // MAP_WITH_LIST
          return MAP_WITH_LIST;
        case 6: // LIST_WITH_MAP
          return LIST_WITH_MAP;
        case 7: // NESTED
          return NESTED;
        case 8: // ENUM_LIST
          return ENUM_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INNER_TEST_STRUCT,_Fields.MAP_WITH_STRUCT,_Fields.LIST_WITH_STRUCT,_Fields.MAP_WITH_LIST,_Fields.LIST_WITH_MAP,_Fields.NESTED,_Fields.ENUM_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR_VAL, new org.apache.thrift.meta_data.FieldMetaData("strVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_TEST_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("innerTestStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnerTestStruct.class)));
    tmpMap.put(_Fields.MAP_WITH_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("mapWithStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleStruct.class))));
    tmpMap.put(_Fields.LIST_WITH_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("listWithStruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleStruct.class))));
    tmpMap.put(_Fields.MAP_WITH_LIST, new org.apache.thrift.meta_data.FieldMetaData("mapWithList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.LIST_WITH_MAP, new org.apache.thrift.meta_data.FieldMetaData("listWithMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.NESTED, new org.apache.thrift.meta_data.FieldMetaData("nested", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleStruct.class)))));
    tmpMap.put(_Fields.ENUM_LIST, new org.apache.thrift.meta_data.FieldMetaData("enumList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TestType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestStruct.class, metaDataMap);
  }

  public TestStruct() {
    this.strVal = "";

  }

  public TestStruct(
    String strVal)
  {
    this();
    this.strVal = strVal;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestStruct(TestStruct other) {
    if (other.isSetStrVal()) {
      this.strVal = other.strVal;
    }
    if (other.isSetInnerTestStruct()) {
      this.innerTestStruct = new InnerTestStruct(other.innerTestStruct);
    }
    if (other.isSetMapWithStruct()) {
      Map<String,SimpleStruct> __this__mapWithStruct = new HashMap<String,SimpleStruct>(other.mapWithStruct.size());
      for (Map.Entry<String, SimpleStruct> other_element : other.mapWithStruct.entrySet()) {

        String other_element_key = other_element.getKey();
        SimpleStruct other_element_value = other_element.getValue();

        String __this__mapWithStruct_copy_key = other_element_key;

        SimpleStruct __this__mapWithStruct_copy_value = new SimpleStruct(other_element_value);

        __this__mapWithStruct.put(__this__mapWithStruct_copy_key, __this__mapWithStruct_copy_value);
      }
      this.mapWithStruct = __this__mapWithStruct;
    }
    if (other.isSetListWithStruct()) {
      List<SimpleStruct> __this__listWithStruct = new ArrayList<SimpleStruct>(other.listWithStruct.size());
      for (SimpleStruct other_element : other.listWithStruct) {
        __this__listWithStruct.add(new SimpleStruct(other_element));
      }
      this.listWithStruct = __this__listWithStruct;
    }
    if (other.isSetMapWithList()) {
      Map<String,List<Long>> __this__mapWithList = new HashMap<String,List<Long>>(other.mapWithList.size());
      for (Map.Entry<String, List<Long>> other_element : other.mapWithList.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Long> other_element_value = other_element.getValue();

        String __this__mapWithList_copy_key = other_element_key;

        List<Long> __this__mapWithList_copy_value = new ArrayList<Long>(other_element_value);

        __this__mapWithList.put(__this__mapWithList_copy_key, __this__mapWithList_copy_value);
      }
      this.mapWithList = __this__mapWithList;
    }
    if (other.isSetListWithMap()) {
      List<Map<String,Integer>> __this__listWithMap = new ArrayList<Map<String,Integer>>(other.listWithMap.size());
      for (Map<String,Integer> other_element : other.listWithMap) {
        Map<String,Integer> __this__listWithMap_copy = new HashMap<String,Integer>(other_element);
        __this__listWithMap.add(__this__listWithMap_copy);
      }
      this.listWithMap = __this__listWithMap;
    }
    if (other.isSetNested()) {
      Map<String,List<SimpleStruct>> __this__nested = new HashMap<String,List<SimpleStruct>>(other.nested.size());
      for (Map.Entry<String, List<SimpleStruct>> other_element : other.nested.entrySet()) {

        String other_element_key = other_element.getKey();
        List<SimpleStruct> other_element_value = other_element.getValue();

        String __this__nested_copy_key = other_element_key;

        List<SimpleStruct> __this__nested_copy_value = new ArrayList<SimpleStruct>(other_element_value.size());
        for (SimpleStruct other_element_value_element : other_element_value) {
          __this__nested_copy_value.add(new SimpleStruct(other_element_value_element));
        }

        __this__nested.put(__this__nested_copy_key, __this__nested_copy_value);
      }
      this.nested = __this__nested;
    }
    if (other.isSetEnumList()) {
      List<TestType> __this__enumList = new ArrayList<TestType>(other.enumList.size());
      for (TestType other_element : other.enumList) {
        __this__enumList.add(other_element);
      }
      this.enumList = __this__enumList;
    }
  }

  public TestStruct deepCopy() {
    return new TestStruct(this);
  }

  @Override
  public void clear() {
    this.strVal = "";

    this.innerTestStruct = null;
    this.mapWithStruct = null;
    this.listWithStruct = null;
    this.mapWithList = null;
    this.listWithMap = null;
    this.nested = null;
    this.enumList = null;
  }

  public String getStrVal() {
    return this.strVal;
  }

  public TestStruct setStrVal(String strVal) {
    this.strVal = strVal;
    return this;
  }

  public void unsetStrVal() {
    this.strVal = null;
  }

  /** Returns true if field strVal is set (has been assigned a value) and false otherwise */
  public boolean isSetStrVal() {
    return this.strVal != null;
  }

  public void setStrValIsSet(boolean value) {
    if (!value) {
      this.strVal = null;
    }
  }

  public InnerTestStruct getInnerTestStruct() {
    return this.innerTestStruct;
  }

  public TestStruct setInnerTestStruct(InnerTestStruct innerTestStruct) {
    this.innerTestStruct = innerTestStruct;
    return this;
  }

  public void unsetInnerTestStruct() {
    this.innerTestStruct = null;
  }

  /** Returns true if field innerTestStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerTestStruct() {
    return this.innerTestStruct != null;
  }

  public void setInnerTestStructIsSet(boolean value) {
    if (!value) {
      this.innerTestStruct = null;
    }
  }

  public int getMapWithStructSize() {
    return (this.mapWithStruct == null) ? 0 : this.mapWithStruct.size();
  }

  public void putToMapWithStruct(String key, SimpleStruct val) {
    if (this.mapWithStruct == null) {
      this.mapWithStruct = new HashMap<String,SimpleStruct>();
    }
    this.mapWithStruct.put(key, val);
  }

  public Map<String,SimpleStruct> getMapWithStruct() {
    return this.mapWithStruct;
  }

  public TestStruct setMapWithStruct(Map<String,SimpleStruct> mapWithStruct) {
    this.mapWithStruct = mapWithStruct;
    return this;
  }

  public void unsetMapWithStruct() {
    this.mapWithStruct = null;
  }

  /** Returns true if field mapWithStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetMapWithStruct() {
    return this.mapWithStruct != null;
  }

  public void setMapWithStructIsSet(boolean value) {
    if (!value) {
      this.mapWithStruct = null;
    }
  }

  public int getListWithStructSize() {
    return (this.listWithStruct == null) ? 0 : this.listWithStruct.size();
  }

  public java.util.Iterator<SimpleStruct> getListWithStructIterator() {
    return (this.listWithStruct == null) ? null : this.listWithStruct.iterator();
  }

  public void addToListWithStruct(SimpleStruct elem) {
    if (this.listWithStruct == null) {
      this.listWithStruct = new ArrayList<SimpleStruct>();
    }
    this.listWithStruct.add(elem);
  }

  public List<SimpleStruct> getListWithStruct() {
    return this.listWithStruct;
  }

  public TestStruct setListWithStruct(List<SimpleStruct> listWithStruct) {
    this.listWithStruct = listWithStruct;
    return this;
  }

  public void unsetListWithStruct() {
    this.listWithStruct = null;
  }

  /** Returns true if field listWithStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetListWithStruct() {
    return this.listWithStruct != null;
  }

  public void setListWithStructIsSet(boolean value) {
    if (!value) {
      this.listWithStruct = null;
    }
  }

  public int getMapWithListSize() {
    return (this.mapWithList == null) ? 0 : this.mapWithList.size();
  }

  public void putToMapWithList(String key, List<Long> val) {
    if (this.mapWithList == null) {
      this.mapWithList = new HashMap<String,List<Long>>();
    }
    this.mapWithList.put(key, val);
  }

  public Map<String,List<Long>> getMapWithList() {
    return this.mapWithList;
  }

  public TestStruct setMapWithList(Map<String,List<Long>> mapWithList) {
    this.mapWithList = mapWithList;
    return this;
  }

  public void unsetMapWithList() {
    this.mapWithList = null;
  }

  /** Returns true if field mapWithList is set (has been assigned a value) and false otherwise */
  public boolean isSetMapWithList() {
    return this.mapWithList != null;
  }

  public void setMapWithListIsSet(boolean value) {
    if (!value) {
      this.mapWithList = null;
    }
  }

  public int getListWithMapSize() {
    return (this.listWithMap == null) ? 0 : this.listWithMap.size();
  }

  public java.util.Iterator<Map<String,Integer>> getListWithMapIterator() {
    return (this.listWithMap == null) ? null : this.listWithMap.iterator();
  }

  public void addToListWithMap(Map<String,Integer> elem) {
    if (this.listWithMap == null) {
      this.listWithMap = new ArrayList<Map<String,Integer>>();
    }
    this.listWithMap.add(elem);
  }

  public List<Map<String,Integer>> getListWithMap() {
    return this.listWithMap;
  }

  public TestStruct setListWithMap(List<Map<String,Integer>> listWithMap) {
    this.listWithMap = listWithMap;
    return this;
  }

  public void unsetListWithMap() {
    this.listWithMap = null;
  }

  /** Returns true if field listWithMap is set (has been assigned a value) and false otherwise */
  public boolean isSetListWithMap() {
    return this.listWithMap != null;
  }

  public void setListWithMapIsSet(boolean value) {
    if (!value) {
      this.listWithMap = null;
    }
  }

  public int getNestedSize() {
    return (this.nested == null) ? 0 : this.nested.size();
  }

  public void putToNested(String key, List<SimpleStruct> val) {
    if (this.nested == null) {
      this.nested = new HashMap<String,List<SimpleStruct>>();
    }
    this.nested.put(key, val);
  }

  public Map<String,List<SimpleStruct>> getNested() {
    return this.nested;
  }

  public TestStruct setNested(Map<String,List<SimpleStruct>> nested) {
    this.nested = nested;
    return this;
  }

  public void unsetNested() {
    this.nested = null;
  }

  /** Returns true if field nested is set (has been assigned a value) and false otherwise */
  public boolean isSetNested() {
    return this.nested != null;
  }

  public void setNestedIsSet(boolean value) {
    if (!value) {
      this.nested = null;
    }
  }

  public int getEnumListSize() {
    return (this.enumList == null) ? 0 : this.enumList.size();
  }

  public java.util.Iterator<TestType> getEnumListIterator() {
    return (this.enumList == null) ? null : this.enumList.iterator();
  }

  public void addToEnumList(TestType elem) {
    if (this.enumList == null) {
      this.enumList = new ArrayList<TestType>();
    }
    this.enumList.add(elem);
  }

  public List<TestType> getEnumList() {
    return this.enumList;
  }

  public TestStruct setEnumList(List<TestType> enumList) {
    this.enumList = enumList;
    return this;
  }

  public void unsetEnumList() {
    this.enumList = null;
  }

  /** Returns true if field enumList is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumList() {
    return this.enumList != null;
  }

  public void setEnumListIsSet(boolean value) {
    if (!value) {
      this.enumList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STR_VAL:
      if (value == null) {
        unsetStrVal();
      } else {
        setStrVal((String)value);
      }
      break;

    case INNER_TEST_STRUCT:
      if (value == null) {
        unsetInnerTestStruct();
      } else {
        setInnerTestStruct((InnerTestStruct)value);
      }
      break;

    case MAP_WITH_STRUCT:
      if (value == null) {
        unsetMapWithStruct();
      } else {
        setMapWithStruct((Map<String,SimpleStruct>)value);
      }
      break;

    case LIST_WITH_STRUCT:
      if (value == null) {
        unsetListWithStruct();
      } else {
        setListWithStruct((List<SimpleStruct>)value);
      }
      break;

    case MAP_WITH_LIST:
      if (value == null) {
        unsetMapWithList();
      } else {
        setMapWithList((Map<String,List<Long>>)value);
      }
      break;

    case LIST_WITH_MAP:
      if (value == null) {
        unsetListWithMap();
      } else {
        setListWithMap((List<Map<String,Integer>>)value);
      }
      break;

    case NESTED:
      if (value == null) {
        unsetNested();
      } else {
        setNested((Map<String,List<SimpleStruct>>)value);
      }
      break;

    case ENUM_LIST:
      if (value == null) {
        unsetEnumList();
      } else {
        setEnumList((List<TestType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STR_VAL:
      return getStrVal();

    case INNER_TEST_STRUCT:
      return getInnerTestStruct();

    case MAP_WITH_STRUCT:
      return getMapWithStruct();

    case LIST_WITH_STRUCT:
      return getListWithStruct();

    case MAP_WITH_LIST:
      return getMapWithList();

    case LIST_WITH_MAP:
      return getListWithMap();

    case NESTED:
      return getNested();

    case ENUM_LIST:
      return getEnumList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STR_VAL:
      return isSetStrVal();
    case INNER_TEST_STRUCT:
      return isSetInnerTestStruct();
    case MAP_WITH_STRUCT:
      return isSetMapWithStruct();
    case LIST_WITH_STRUCT:
      return isSetListWithStruct();
    case MAP_WITH_LIST:
      return isSetMapWithList();
    case LIST_WITH_MAP:
      return isSetListWithMap();
    case NESTED:
      return isSetNested();
    case ENUM_LIST:
      return isSetEnumList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestStruct)
      return this.equals((TestStruct)that);
    return false;
  }

  public boolean equals(TestStruct that) {
    if (that == null)
      return false;

    boolean this_present_strVal = true && this.isSetStrVal();
    boolean that_present_strVal = true && that.isSetStrVal();
    if (this_present_strVal || that_present_strVal) {
      if (!(this_present_strVal && that_present_strVal))
        return false;
      if (!this.strVal.equals(that.strVal))
        return false;
    }

    boolean this_present_innerTestStruct = true && this.isSetInnerTestStruct();
    boolean that_present_innerTestStruct = true && that.isSetInnerTestStruct();
    if (this_present_innerTestStruct || that_present_innerTestStruct) {
      if (!(this_present_innerTestStruct && that_present_innerTestStruct))
        return false;
      if (!this.innerTestStruct.equals(that.innerTestStruct))
        return false;
    }

    boolean this_present_mapWithStruct = true && this.isSetMapWithStruct();
    boolean that_present_mapWithStruct = true && that.isSetMapWithStruct();
    if (this_present_mapWithStruct || that_present_mapWithStruct) {
      if (!(this_present_mapWithStruct && that_present_mapWithStruct))
        return false;
      if (!this.mapWithStruct.equals(that.mapWithStruct))
        return false;
    }

    boolean this_present_listWithStruct = true && this.isSetListWithStruct();
    boolean that_present_listWithStruct = true && that.isSetListWithStruct();
    if (this_present_listWithStruct || that_present_listWithStruct) {
      if (!(this_present_listWithStruct && that_present_listWithStruct))
        return false;
      if (!this.listWithStruct.equals(that.listWithStruct))
        return false;
    }

    boolean this_present_mapWithList = true && this.isSetMapWithList();
    boolean that_present_mapWithList = true && that.isSetMapWithList();
    if (this_present_mapWithList || that_present_mapWithList) {
      if (!(this_present_mapWithList && that_present_mapWithList))
        return false;
      if (!this.mapWithList.equals(that.mapWithList))
        return false;
    }

    boolean this_present_listWithMap = true && this.isSetListWithMap();
    boolean that_present_listWithMap = true && that.isSetListWithMap();
    if (this_present_listWithMap || that_present_listWithMap) {
      if (!(this_present_listWithMap && that_present_listWithMap))
        return false;
      if (!this.listWithMap.equals(that.listWithMap))
        return false;
    }

    boolean this_present_nested = true && this.isSetNested();
    boolean that_present_nested = true && that.isSetNested();
    if (this_present_nested || that_present_nested) {
      if (!(this_present_nested && that_present_nested))
        return false;
      if (!this.nested.equals(that.nested))
        return false;
    }

    boolean this_present_enumList = true && this.isSetEnumList();
    boolean that_present_enumList = true && that.isSetEnumList();
    if (this_present_enumList || that_present_enumList) {
      if (!(this_present_enumList && that_present_enumList))
        return false;
      if (!this.enumList.equals(that.enumList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_strVal = true && (isSetStrVal());
    list.add(present_strVal);
    if (present_strVal)
      list.add(strVal);

    boolean present_innerTestStruct = true && (isSetInnerTestStruct());
    list.add(present_innerTestStruct);
    if (present_innerTestStruct)
      list.add(innerTestStruct);

    boolean present_mapWithStruct = true && (isSetMapWithStruct());
    list.add(present_mapWithStruct);
    if (present_mapWithStruct)
      list.add(mapWithStruct);

    boolean present_listWithStruct = true && (isSetListWithStruct());
    list.add(present_listWithStruct);
    if (present_listWithStruct)
      list.add(listWithStruct);

    boolean present_mapWithList = true && (isSetMapWithList());
    list.add(present_mapWithList);
    if (present_mapWithList)
      list.add(mapWithList);

    boolean present_listWithMap = true && (isSetListWithMap());
    list.add(present_listWithMap);
    if (present_listWithMap)
      list.add(listWithMap);

    boolean present_nested = true && (isSetNested());
    list.add(present_nested);
    if (present_nested)
      list.add(nested);

    boolean present_enumList = true && (isSetEnumList());
    list.add(present_enumList);
    if (present_enumList)
      list.add(enumList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStrVal()).compareTo(other.isSetStrVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strVal, other.strVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerTestStruct()).compareTo(other.isSetInnerTestStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerTestStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerTestStruct, other.innerTestStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapWithStruct()).compareTo(other.isSetMapWithStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapWithStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapWithStruct, other.mapWithStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListWithStruct()).compareTo(other.isSetListWithStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListWithStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listWithStruct, other.listWithStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapWithList()).compareTo(other.isSetMapWithList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapWithList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapWithList, other.mapWithList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListWithMap()).compareTo(other.isSetListWithMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListWithMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listWithMap, other.listWithMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNested()).compareTo(other.isSetNested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nested, other.nested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumList()).compareTo(other.isSetEnumList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumList, other.enumList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestStruct(");
    boolean first = true;

    sb.append("strVal:");
    if (this.strVal == null) {
      sb.append("null");
    } else {
      sb.append(this.strVal);
    }
    first = false;
    if (isSetInnerTestStruct()) {
      if (!first) sb.append(", ");
      sb.append("innerTestStruct:");
      if (this.innerTestStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.innerTestStruct);
      }
      first = false;
    }
    if (isSetMapWithStruct()) {
      if (!first) sb.append(", ");
      sb.append("mapWithStruct:");
      if (this.mapWithStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.mapWithStruct);
      }
      first = false;
    }
    if (isSetListWithStruct()) {
      if (!first) sb.append(", ");
      sb.append("listWithStruct:");
      if (this.listWithStruct == null) {
        sb.append("null");
      } else {
        sb.append(this.listWithStruct);
      }
      first = false;
    }
    if (isSetMapWithList()) {
      if (!first) sb.append(", ");
      sb.append("mapWithList:");
      if (this.mapWithList == null) {
        sb.append("null");
      } else {
        sb.append(this.mapWithList);
      }
      first = false;
    }
    if (isSetListWithMap()) {
      if (!first) sb.append(", ");
      sb.append("listWithMap:");
      if (this.listWithMap == null) {
        sb.append("null");
      } else {
        sb.append(this.listWithMap);
      }
      first = false;
    }
    if (isSetNested()) {
      if (!first) sb.append(", ");
      sb.append("nested:");
      if (this.nested == null) {
        sb.append("null");
      } else {
        sb.append(this.nested);
      }
      first = false;
    }
    if (isSetEnumList()) {
      if (!first) sb.append(", ");
      sb.append("enumList:");
      if (this.enumList == null) {
        sb.append("null");
      } else {
        sb.append(this.enumList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (innerTestStruct != null) {
      innerTestStruct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestStructStandardSchemeFactory implements SchemeFactory {
    public TestStructStandardScheme getScheme() {
      return new TestStructStandardScheme();
    }
  }

  private static class TestStructStandardScheme extends StandardScheme<TestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STR_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strVal = iprot.readString();
              struct.setStrValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INNER_TEST_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.innerTestStruct = new InnerTestStruct();
              struct.innerTestStruct.read(iprot);
              struct.setInnerTestStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_WITH_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.mapWithStruct = new HashMap<String,SimpleStruct>(2*_map18.size);
                String _key19;
                SimpleStruct _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readString();
                  _val20 = new SimpleStruct();
                  _val20.read(iprot);
                  struct.mapWithStruct.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setMapWithStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIST_WITH_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.listWithStruct = new ArrayList<SimpleStruct>(_list22.size);
                SimpleStruct _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new SimpleStruct();
                  _elem23.read(iprot);
                  struct.listWithStruct.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setListWithStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAP_WITH_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map25 = iprot.readMapBegin();
                struct.mapWithList = new HashMap<String,List<Long>>(2*_map25.size);
                String _key26;
                List<Long> _val27;
                for (int _i28 = 0; _i28 < _map25.size; ++_i28)
                {
                  _key26 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                    _val27 = new ArrayList<Long>(_list29.size);
                    long _elem30;
                    for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                    {
                      _elem30 = iprot.readI64();
                      _val27.add(_elem30);
                    }
                    iprot.readListEnd();
                  }
                  struct.mapWithList.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setMapWithListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIST_WITH_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.listWithMap = new ArrayList<Map<String,Integer>>(_list32.size);
                Map<String,Integer> _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  {
                    org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                    _elem33 = new HashMap<String,Integer>(2*_map35.size);
                    String _key36;
                    int _val37;
                    for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                    {
                      _key36 = iprot.readString();
                      _val37 = iprot.readI32();
                      _elem33.put(_key36, _val37);
                    }
                    iprot.readMapEnd();
                  }
                  struct.listWithMap.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setListWithMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.nested = new HashMap<String,List<SimpleStruct>>(2*_map39.size);
                String _key40;
                List<SimpleStruct> _val41;
                for (int _i42 = 0; _i42 < _map39.size; ++_i42)
                {
                  _key40 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                    _val41 = new ArrayList<SimpleStruct>(_list43.size);
                    SimpleStruct _elem44;
                    for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                    {
                      _elem44 = new SimpleStruct();
                      _elem44.read(iprot);
                      _val41.add(_elem44);
                    }
                    iprot.readListEnd();
                  }
                  struct.nested.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setNestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENUM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.enumList = new ArrayList<TestType>(_list46.size);
                TestType _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = org.apache.flink.connector.rpc.thrift.generated.TestType.findByValue(iprot.readI32());
                  struct.enumList.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setEnumListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.strVal != null) {
        oprot.writeFieldBegin(STR_VAL_FIELD_DESC);
        oprot.writeString(struct.strVal);
        oprot.writeFieldEnd();
      }
      if (struct.innerTestStruct != null) {
        if (struct.isSetInnerTestStruct()) {
          oprot.writeFieldBegin(INNER_TEST_STRUCT_FIELD_DESC);
          struct.innerTestStruct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapWithStruct != null) {
        if (struct.isSetMapWithStruct()) {
          oprot.writeFieldBegin(MAP_WITH_STRUCT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mapWithStruct.size()));
            for (Map.Entry<String, SimpleStruct> _iter49 : struct.mapWithStruct.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              _iter49.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.listWithStruct != null) {
        if (struct.isSetListWithStruct()) {
          oprot.writeFieldBegin(LIST_WITH_STRUCT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listWithStruct.size()));
            for (SimpleStruct _iter50 : struct.listWithStruct)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapWithList != null) {
        if (struct.isSetMapWithList()) {
          oprot.writeFieldBegin(MAP_WITH_LIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.mapWithList.size()));
            for (Map.Entry<String, List<Long>> _iter51 : struct.mapWithList.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter51.getValue().size()));
                for (long _iter52 : _iter51.getValue())
                {
                  oprot.writeI64(_iter52);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.listWithMap != null) {
        if (struct.isSetListWithMap()) {
          oprot.writeFieldBegin(LIST_WITH_MAP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.listWithMap.size()));
            for (Map<String,Integer> _iter53 : struct.listWithMap)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, _iter53.size()));
                for (Map.Entry<String, Integer> _iter54 : _iter53.entrySet())
                {
                  oprot.writeString(_iter54.getKey());
                  oprot.writeI32(_iter54.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nested != null) {
        if (struct.isSetNested()) {
          oprot.writeFieldBegin(NESTED_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.nested.size()));
            for (Map.Entry<String, List<SimpleStruct>> _iter55 : struct.nested.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter55.getValue().size()));
                for (SimpleStruct _iter56 : _iter55.getValue())
                {
                  _iter56.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.enumList != null) {
        if (struct.isSetEnumList()) {
          oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.enumList.size()));
            for (TestType _iter57 : struct.enumList)
            {
              oprot.writeI32(_iter57.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestStructTupleSchemeFactory implements SchemeFactory {
    public TestStructTupleScheme getScheme() {
      return new TestStructTupleScheme();
    }
  }

  private static class TestStructTupleScheme extends TupleScheme<TestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStrVal()) {
        optionals.set(0);
      }
      if (struct.isSetInnerTestStruct()) {
        optionals.set(1);
      }
      if (struct.isSetMapWithStruct()) {
        optionals.set(2);
      }
      if (struct.isSetListWithStruct()) {
        optionals.set(3);
      }
      if (struct.isSetMapWithList()) {
        optionals.set(4);
      }
      if (struct.isSetListWithMap()) {
        optionals.set(5);
      }
      if (struct.isSetNested()) {
        optionals.set(6);
      }
      if (struct.isSetEnumList()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetStrVal()) {
        oprot.writeString(struct.strVal);
      }
      if (struct.isSetInnerTestStruct()) {
        struct.innerTestStruct.write(oprot);
      }
      if (struct.isSetMapWithStruct()) {
        {
          oprot.writeI32(struct.mapWithStruct.size());
          for (Map.Entry<String, SimpleStruct> _iter58 : struct.mapWithStruct.entrySet())
          {
            oprot.writeString(_iter58.getKey());
            _iter58.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetListWithStruct()) {
        {
          oprot.writeI32(struct.listWithStruct.size());
          for (SimpleStruct _iter59 : struct.listWithStruct)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetMapWithList()) {
        {
          oprot.writeI32(struct.mapWithList.size());
          for (Map.Entry<String, List<Long>> _iter60 : struct.mapWithList.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            {
              oprot.writeI32(_iter60.getValue().size());
              for (long _iter61 : _iter60.getValue())
              {
                oprot.writeI64(_iter61);
              }
            }
          }
        }
      }
      if (struct.isSetListWithMap()) {
        {
          oprot.writeI32(struct.listWithMap.size());
          for (Map<String,Integer> _iter62 : struct.listWithMap)
          {
            {
              oprot.writeI32(_iter62.size());
              for (Map.Entry<String, Integer> _iter63 : _iter62.entrySet())
              {
                oprot.writeString(_iter63.getKey());
                oprot.writeI32(_iter63.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetNested()) {
        {
          oprot.writeI32(struct.nested.size());
          for (Map.Entry<String, List<SimpleStruct>> _iter64 : struct.nested.entrySet())
          {
            oprot.writeString(_iter64.getKey());
            {
              oprot.writeI32(_iter64.getValue().size());
              for (SimpleStruct _iter65 : _iter64.getValue())
              {
                _iter65.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetEnumList()) {
        {
          oprot.writeI32(struct.enumList.size());
          for (TestType _iter66 : struct.enumList)
          {
            oprot.writeI32(_iter66.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.strVal = iprot.readString();
        struct.setStrValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.innerTestStruct = new InnerTestStruct();
        struct.innerTestStruct.read(iprot);
        struct.setInnerTestStructIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mapWithStruct = new HashMap<String,SimpleStruct>(2*_map67.size);
          String _key68;
          SimpleStruct _val69;
          for (int _i70 = 0; _i70 < _map67.size; ++_i70)
          {
            _key68 = iprot.readString();
            _val69 = new SimpleStruct();
            _val69.read(iprot);
            struct.mapWithStruct.put(_key68, _val69);
          }
        }
        struct.setMapWithStructIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.listWithStruct = new ArrayList<SimpleStruct>(_list71.size);
          SimpleStruct _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new SimpleStruct();
            _elem72.read(iprot);
            struct.listWithStruct.add(_elem72);
          }
        }
        struct.setListWithStructIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.mapWithList = new HashMap<String,List<Long>>(2*_map74.size);
          String _key75;
          List<Long> _val76;
          for (int _i77 = 0; _i77 < _map74.size; ++_i77)
          {
            _key75 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
              _val76 = new ArrayList<Long>(_list78.size);
              long _elem79;
              for (int _i80 = 0; _i80 < _list78.size; ++_i80)
              {
                _elem79 = iprot.readI64();
                _val76.add(_elem79);
              }
            }
            struct.mapWithList.put(_key75, _val76);
          }
        }
        struct.setMapWithListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.listWithMap = new ArrayList<Map<String,Integer>>(_list81.size);
          Map<String,Integer> _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            {
              org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem82 = new HashMap<String,Integer>(2*_map84.size);
              String _key85;
              int _val86;
              for (int _i87 = 0; _i87 < _map84.size; ++_i87)
              {
                _key85 = iprot.readString();
                _val86 = iprot.readI32();
                _elem82.put(_key85, _val86);
              }
            }
            struct.listWithMap.add(_elem82);
          }
        }
        struct.setListWithMapIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.nested = new HashMap<String,List<SimpleStruct>>(2*_map88.size);
          String _key89;
          List<SimpleStruct> _val90;
          for (int _i91 = 0; _i91 < _map88.size; ++_i91)
          {
            _key89 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val90 = new ArrayList<SimpleStruct>(_list92.size);
              SimpleStruct _elem93;
              for (int _i94 = 0; _i94 < _list92.size; ++_i94)
              {
                _elem93 = new SimpleStruct();
                _elem93.read(iprot);
                _val90.add(_elem93);
              }
            }
            struct.nested.put(_key89, _val90);
          }
        }
        struct.setNestedIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.enumList = new ArrayList<TestType>(_list95.size);
          TestType _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = org.apache.flink.connector.rpc.thrift.generated.TestType.findByValue(iprot.readI32());
            struct.enumList.add(_elem96);
          }
        }
        struct.setEnumListIsSet(true);
      }
    }
  }

}

